:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class Pair(x, y)
fun mktup2(x, y) = mktup(x, y)
fun mktup(x, y) = Pair(x, y)
fun foo() =
  mktup2(1, 2)
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |mktup2|(|x|,| |y|)| |#=| |mktup|(|x|,| |y|)|↵|#fun| |mktup|(|x|,| |y|)| |#=| |Pair|(|x|,| |y|)|↵|#fun| |foo|(||)| |#=|→|mktup2|(|1|,| |2|)|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun mktup2 = (x, y,) => mktup(x, y,); fun mktup = (x, y,) => Pair(x, y,); fun foo = () => {mktup2(1, 2,)}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, mktup2, None, [], Lam(Tup(_: Var(x), _: Var(y)), App(Var(mktup), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, mktup, None, [], Lam(Tup(_: Var(x), _: Var(y)), App(Var(Pair), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, mktup2, [x%0,y%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%1) = mktup(x%0,y%0)
//│   in x%1
//│ )
//│ Def(1, mktup, [x%2,y%1], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = Pair(x%2,y%1)
//│   in x%3
//│ )
//│ Def(2, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%4) = mktup2(1,2)
//│   in x%4
//│ )
//│ },
//│ let* (x%5) = foo()
//│   in x%5)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, mktup2, [x%0,y%0], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let* (x%1) = mktup(x%0,y%0)
//│   in x%1
//│ )
//│ Def(1, mktup, [x%2,y%1], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let x%3 = Pair(x%2,y%1)
//│   in x%3
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let* (x%4) = mktup2(1,2)
//│   in x%4
//│ )
//│ },
//│ let* (x%5) = foo()
//│   in x%5)
//│ 
//│ Interpreted ------------------------------
//│ Pair(1,2)
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ Pair(1,2)
//│ 
//│ 
//│ Fuel used: 1

:GOInterp
:GraphOpt
class Pair(x, y)
fun foo(pair) =
  if pair is
    Pair(x, y) then Pair(x, y)
fun bar() =
  foo(Pair(1, 2))
bar()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|pair|)| |#=|→|#if| |pair| |is|→|Pair|(|x|,| |y|)| |#then| |Pair|(|x|,| |y|)|←|←|↵|#fun| |bar|(||)| |#=|→|foo|(|Pair|(|1|,| |2|)|)|←|↵|bar|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = (pair,) => {if pair is ‹(Pair(x, y,)) then Pair(x, y,)›}; fun bar = () => {foo(Pair(1, 2,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [pair%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%3) = x%3
//│   in case pair%0 of
//│     Pair => let x%0 = pair%0.y
//│       in let x%1 = pair%0.x
//│         in let x%2 = Pair(x%1,x%0)
//│           in jump j%0(x%2)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = Pair(1,2)
//│   in let* (x%5) = foo(x%4)
//│     in x%5
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [pair%0], [{EDestruct,EDirect,ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [Some(ICtor(Pair))], 1, 
//│ case pair%0 of
//│   Pair => let x%0 = pair%0.y
//│     in let x%1 = pair%0.x
//│       in let x%2 = Pair(x%1,x%0)
//│         in x%2
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let x%4 = Pair(1,2)
//│   in let* (x%5) = foo(x%4)
//│     in x%5
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ Interpreted ------------------------------
//│ Pair(1,2)
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let* (x%5) = foo$D%0$S%0(2,1)
//│   in x%5
//│ )
//│ Def(5, foo$D%0$S%0, [pair%0_y,pair%0_x], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Pair))], 1, 
//│ let x%2 = Pair(pair%0_x,pair%0_y)
//│   in x%2
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ Pair(1,2)
//│ 
//│ 
//│ Fuel used: 2



:GOInterp
:GraphOpt
class Pair(x, y) {}
fun silly(pair) =
  let _ = 0
  let n = if pair is
    Pair(x1, x2) then
      if pair is
        Pair (x3, x4) then x3 + 1
  n + 1
fun foo() =
    let a = Pair(0, 1)
    let b = silly(a)
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)| |{||}|↵|#fun| |silly|(|pair|)| |#=|→|#let| |_| |#=| |0|↵|#let| |n| |#=| |#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then|→|#if| |pair| |is|→|Pair| |(|x3|,| |x4|)| |#then| |x3| |+| |1|←|←|←|↵|n| |+| |1|←|↵|#fun| |foo|(||)| |#=|→|#let| |a| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |silly|(|a|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun silly = (pair,) => {let _ = 0; let n = if pair is ‹(Pair(x1, x2,)) then {if pair is ‹(Pair(x3, x4,)) then +(x3,)(1,)›}›; +(n,)(1,)}; fun foo = () => {let a = Pair(0, 1,); let b = silly(a,); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, silly, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, silly, [pair%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = 0
//│   in let join j%0(x%7) = let x%8 = +(x%7,1)
//│         in x%8
//│     in case pair%0 of
//│       Pair => let x%1 = pair%0.y
//│         in let x%2 = pair%0.x
//│           in let join j%1(x%6) = jump j%0(x%6)
//│             in case pair%0 of
//│               Pair => let x%3 = pair%0.y
//│                 in let x%4 = pair%0.x
//│                   in let x%5 = +(x%4,1)
//│                     in jump j%1(x%5)
//│ )
//│ Def(1, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = Pair(0,1)
//│   in let* (x%10) = silly(x%9)
//│     in x%10
//│ )
//│ },
//│ let* (x%11) = foo()
//│   in x%11)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, silly, [pair%0], [{EDestruct,EDirect,ESelect(x)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ case pair%0 of
//│   Pair => case pair%0 of
//│     Pair => let x%4 = pair%0.x
//│       in let x%5 = +(x%4,1)
//│         in jump j%0(x%5)
//│ )
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = Pair(0,1)
//│   in let* (x%10) = silly(x%9)
//│     in x%10
//│ )
//│ Def(2, @join j%0, [x%7], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%8 = +(x%7,1)
//│   in x%8
//│ )
//│ },
//│ let* (x%11) = foo()
//│   in x%11)
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = Pair(0,1)
//│   in let* (x%10) = silly$D%0(x%9)
//│     in x%10
//│ )
//│ Def(2, @join j%0, [x%7], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%8 = +(x%7,1)
//│   in x%8
//│ )
//│ Def(5, silly$D%0, [pair%0], [{EDestruct,EDirect,ESelect(x)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ case pair%0 of
//│   Pair => let x%4 = pair%0.x
//│     in let x%5 = +(x%4,1)
//│       in jump j%0(x%5)
//│ )
//│ },
//│ let* (x%11) = foo()
//│   in x%11)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%10) = silly$D%0$D%0$S%0(0)
//│   in x%10
//│ )
//│ Def(2, @join j%0, [x%7], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%8 = +(x%7,1)
//│   in x%8
//│ )
//│ Def(8, silly$D%0$D%0$S%0, [pair%0_x], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%5 = +(pair%0_x,1)
//│   in jump j%0(x%5)
//│ )
//│ },
//│ let* (x%11) = foo()
//│   in x%11)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Fuel used: 3




:GOInterp
:GraphOpt
class Pair(x, y)
fun inc_fst(pair) =
  let c = 2
  if pair is
    Pair(x1, x2) then x1 + c
fun foo() =
    let a = Pair(0, 1)
    let b = inc_fst(a)
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |inc_fst|(|pair|)| |#=|→|#let| |c| |#=| |2|↵|#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then| |x1| |+| |c|←|←|↵|#fun| |foo|(||)| |#=|→|#let| |a| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |inc_fst|(|a|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun inc_fst = (pair,) => {let c = 2; if pair is ‹(Pair(x1, x2,)) then +(x1,)(c,)›}; fun foo = () => {let a = Pair(0, 1,); let b = inc_fst(a,); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, inc_fst, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, inc_fst, [pair%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = 2
//│   in let join j%0(x%4) = x%4
//│     in case pair%0 of
//│       Pair => let x%1 = pair%0.y
//│         in let x%2 = pair%0.x
//│           in let x%3 = +(x%2,x%0)
//│             in jump j%0(x%3)
//│ )
//│ Def(1, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%5 = Pair(0,1)
//│   in let* (x%6) = inc_fst(x%5)
//│     in x%6
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, inc_fst, [pair%0], [{EDestruct,EDirect,ESelect(x)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ case pair%0 of
//│   Pair => let x%2 = pair%0.x
//│     in let x%3 = +(x%2,2)
//│       in x%3
//│ )
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%5 = Pair(0,1)
//│   in let* (x%6) = inc_fst(x%5)
//│     in x%6
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%6) = inc_fst$D%0$S%0(0)
//│   in x%6
//│ )
//│ Def(5, inc_fst$D%0$S%0, [pair%0_x], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = +(pair%0_x,2)
//│   in x%3
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class Pair(x, y)
fun inc_fst(pair) =
  let _ = 0
  if pair is
    Pair(x1, x2) then x2 + 1
fun foo() =
    let b = inc_fst(Pair(0, 1))
    b
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |inc_fst|(|pair|)| |#=|→|#let| |_| |#=| |0|↵|#if| |pair| |is|→|Pair|(|x1|,| |x2|)| |#then| |x2| |+| |1|←|←|↵|#fun| |foo|(||)| |#=|→|#let| |b| |#=| |inc_fst|(|Pair|(|0|,| |1|)|)|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun inc_fst = (pair,) => {let _ = 0; if pair is ‹(Pair(x1, x2,)) then +(x2,)(1,)›}; fun foo = () => {let b = inc_fst(Pair(0, 1,),); b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, inc_fst, None, [], Lam(Tup(_: Var(pair)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, inc_fst, [pair%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = 0
//│   in let join j%0(x%4) = x%4
//│     in case pair%0 of
//│       Pair => let x%1 = pair%0.y
//│         in let x%2 = pair%0.x
//│           in let x%3 = +(x%1,1)
//│             in jump j%0(x%3)
//│ )
//│ Def(1, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%5 = Pair(0,1)
//│   in let* (x%6) = inc_fst(x%5)
//│     in x%6
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, inc_fst, [pair%0], [{EDestruct,EDirect,ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ case pair%0 of
//│   Pair => let x%1 = pair%0.y
//│     in let x%3 = +(x%1,1)
//│       in x%3
//│ )
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%5 = Pair(0,1)
//│   in let* (x%6) = inc_fst(x%5)
//│     in x%6
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%6) = inc_fst$D%0$S%0(1)
//│   in x%6
//│ )
//│ Def(5, inc_fst$D%0$S%0, [pair%0_y], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = +(pair%0_y,1)
//│   in x%3
//│ )
//│ },
//│ let* (x%7) = foo()
//│   in x%7)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class Left(x)
class Right(y)
fun foo(a, b) =
  let t = if a is
    Left(x) then Left(x + 1)
    Right(y) then Right(b)
  if t is
    Left(x) then x
    Right(y) then y
fun bar() =
  foo(Right(2), 2)
bar()
//│ |#class| |Left|(|x|)|↵|#class| |Right|(|y|)|↵|#fun| |foo|(|a|,| |b|)| |#=|→|#let| |t| |#=| |#if| |a| |is|→|Left|(|x|)| |#then| |Left|(|x| |+| |1|)|↵|Right|(|y|)| |#then| |Right|(|b|)|←|↵|#if| |t| |is|→|Left|(|x|)| |#then| |x|↵|Right|(|y|)| |#then| |y|←|←|↵|#fun| |bar|(||)| |#=|→|foo|(|Right|(|2|)|,| |2|)|←|↵|bar|(||)|
//│ Parsed: {class Left(x,) {}; class Right(y,) {}; fun foo = (a, b,) => {let t = if a is ‹(Left(x,)) then Left(+(x,)(1,),); (Right(y,)) then Right(b,)›; if t is ‹(Left(x,)) then x; (Right(y,)) then y›}; fun bar = () => {foo(Right(2,), 2,)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Left, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, Right, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a), _: Var(b)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Left, [x]) [] {
//│ }
//│ ClassInfo(1, Right, [y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0,b%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%5) = let join j%1(x%8) = x%8
//│       in case x%5 of
//│         Left => let x%6 = x%5.x
//│           in jump j%1(x%6)
//│         Right => let x%7 = x%5.y
//│           in jump j%1(x%7)
//│   in case a%0 of
//│     Left => let x%0 = a%0.x
//│       in let x%1 = +(x%0,1)
//│         in let x%2 = Left(x%1)
//│           in jump j%0(x%2)
//│     Right => let x%3 = a%0.y
//│       in let x%4 = Right(b%0)
//│         in jump j%0(x%4)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = Right(2)
//│   in let* (x%10) = foo(x%9,2)
//│     in x%10
//│ )
//│ },
//│ let* (x%11) = bar()
//│   in x%11)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Left, [x]) [] {
//│ }
//│ ClassInfo(1, Right, [y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0,b%0], [{EDestruct,EDirect,ESelect(x)},{EDirect}],
//│ S: None,
//│ I: [[None,Some(ICtor(Right))]],
//│ [None], 1, 
//│ case a%0 of
//│   Left => let x%0 = a%0.x
//│     in let x%1 = +(x%0,1)
//│       in let x%2 = Left(x%1)
//│         in jump j%0(x%2)
//│   Right => let x%4 = Right(b%0)
//│     in jump j%0(x%4)
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = Right(2)
//│   in let* (x%10) = foo(x%9,2)
//│     in x%10
//│ )
//│ Def(2, @join j%0, [x%5], [{EDestruct,EDirect,ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Left))],[Some(ICtor(Right))]],
//│ [None], 1, 
//│ case x%5 of
//│   Left => let x%6 = x%5.x
//│     in x%6
//│   Right => let x%7 = x%5.y
//│     in x%7
//│ )
//│ },
//│ let* (x%11) = bar()
//│   in x%11)
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Left, [x]) [] {
//│ }
//│ ClassInfo(1, Right, [y]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 2
//│ )
//│ },
//│ let* (x%11) = bar()
//│   in x%11)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 2
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class True
class False
class Pair(x, y)
fun foo(a) = a.x + a.y
fun bar() =
  foo(Pair(1, 0))
bar()
//│ |#class| |True|↵|#class| |False|↵|#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|a|)| |#=| |a|.x| |+| |a|.y|↵|#fun| |bar|(||)| |#=|→|foo|(|Pair|(|1|,| |0|)|)|←|↵|bar|(||)|
//│ Parsed: {class True {}; class False {}; class Pair(x, y,) {}; fun foo = (a,) => +((a).x,)((a).y,); fun bar = () => {foo(Pair(1, 0,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a)), App(App(Var(+), Tup(_: Sel(Var(a), x))), Tup(_: Sel(Var(a), y))))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = a%0.x
//│   in let x%1 = a%0.y
//│     in let x%2 = +(x%0,x%1)
//│       in x%2
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = Pair(1,0)
//│   in let* (x%4) = foo(x%3)
//│     in x%4
//│ )
//│ },
//│ let* (x%5) = bar()
//│   in x%5)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0], [{ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ let x%0 = a%0.x
//│   in let x%1 = a%0.y
//│     in let x%2 = +(x%0,x%1)
//│       in x%2
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = Pair(1,0)
//│   in let* (x%4) = foo(x%3)
//│     in x%4
//│ )
//│ },
//│ let* (x%5) = bar()
//│   in x%5)
//│ 
//│ Interpreted ------------------------------
//│ 1
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%4) = foo$S%0(0,1)
//│   in x%4
//│ )
//│ Def(2, foo$S%0, [a%0_y,a%0_x], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%2 = +(a%0_x,a%0_y)
//│   in x%2
//│ )
//│ },
//│ let* (x%5) = bar()
//│   in x%5)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 1
//│ 
//│ 
//│ Fuel used: 2


:GOInterp
:GraphOpt
class C1(x, y)
class C2(z)
fun foo(a) = if a is
  C1(x, y) then x
  C2(z) then z
fun bar() =
  foo(C1(0, 1))
bar()
//│ |#class| |C1|(|x|,| |y|)|↵|#class| |C2|(|z|)|↵|#fun| |foo|(|a|)| |#=| |#if| |a| |is|→|C1|(|x|,| |y|)| |#then| |x|↵|C2|(|z|)| |#then| |z|←|↵|#fun| |bar|(||)| |#=|→|foo|(|C1|(|0|,| |1|)|)|←|↵|bar|(||)|
//│ Parsed: {class C1(x, y,) {}; class C2(z,) {}; fun foo = (a,) => if a is ‹(C1(x, y,)) then x; (C2(z,)) then z›; fun bar = () => {foo(C1(0, 1,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, C1, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C2, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a)), If(IfOpApp(Var(a), Var(is), IfBlock(IfThen(App(Var(C1), Tup(_: Var(x), _: Var(y))), Var(x);IfThen(App(Var(C2), Tup(_: Var(z))), Var(z)), None))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, C1, [x,y]) [] {
//│ }
//│ ClassInfo(1, C2, [z]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%3) = x%3
//│   in case a%0 of
//│     C1 => let x%0 = a%0.y
//│       in let x%1 = a%0.x
//│         in jump j%0(x%1)
//│     C2 => let x%2 = a%0.z
//│       in jump j%0(x%2)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = C1(0,1)
//│   in let* (x%5) = foo(x%4)
//│     in x%5
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, C1, [x,y]) [] {
//│ }
//│ ClassInfo(1, C2, [z]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0], [{EDestruct,EDirect,ESelect(x),ESelect(z)}],
//│ S: None,
//│ I: [[Some(ICtor(C1))]],
//│ [None], 1, 
//│ case a%0 of
//│   C1 => let x%1 = a%0.x
//│     in x%1
//│   C2 => let x%2 = a%0.z
//│     in x%2
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = C1(0,1)
//│   in let* (x%5) = foo(x%4)
//│     in x%5
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ Interpreted ------------------------------
//│ 0
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, C1, [x,y]) [] {
//│ }
//│ ClassInfo(1, C2, [z]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 0
//│ )
//│ },
//│ let* (x%6) = bar()
//│   in x%6)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 0
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class Pair(x, y)
fun foo(a, b) =
  let x1 = a.x
  let y1 = a.y
  let x2 = b.x
  let y2 = b.y
  x1 + y1 + x2 + y2
fun bar(c) =
  foo(Pair(0, 1), c)
  foo(c, Pair(2, 3))
  foo(Pair(0, 1), Pair(2, 3))
fun baz() =
  bar(Pair(4,5))
baz()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(|a|,| |b|)| |#=|→|#let| |x1| |#=| |a|.x|↵|#let| |y1| |#=| |a|.y|↵|#let| |x2| |#=| |b|.x|↵|#let| |y2| |#=| |b|.y|↵|x1| |+| |y1| |+| |x2| |+| |y2|←|↵|#fun| |bar|(|c|)| |#=|→|foo|(|Pair|(|0|,| |1|)|,| |c|)|↵|foo|(|c|,| |Pair|(|2|,| |3|)|)|↵|foo|(|Pair|(|0|,| |1|)|,| |Pair|(|2|,| |3|)|)|←|↵|#fun| |baz|(||)| |#=|→|bar|(|Pair|(|4|,|5|)|)|←|↵|baz|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = (a, b,) => {let x1 = (a).x; let y1 = (a).y; let x2 = (b).x; let y2 = (b).y; +(+(+(x1,)(y1,),)(x2,),)(y2,)}; fun bar = (c,) => {foo(Pair(0, 1,), c,); foo(c, Pair(2, 3,),); foo(Pair(0, 1,), Pair(2, 3,),)}; fun baz = () => {bar(Pair(4, 5,),)}; baz()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(a), _: Var(b)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(_: Var(c)), Blk(...))), NuFunDef(None, baz, None, [], Lam(Tup(), Blk(...))), App(Var(baz), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0,b%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = a%0.x
//│   in let x%1 = a%0.y
//│     in let x%2 = b%0.x
//│       in let x%3 = b%0.y
//│         in let x%4 = +(x%0,x%1)
//│           in let x%5 = +(x%4,x%2)
//│             in let x%6 = +(x%5,x%3)
//│               in x%6
//│ )
//│ Def(1, bar, [c%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%7 = Pair(0,1)
//│   in let* (x%8) = foo(x%7,c%0)
//│     in let x%9 = Pair(2,3)
//│       in let* (x%10) = foo(c%0,x%9)
//│         in let x%11 = Pair(0,1)
//│           in let x%12 = Pair(2,3)
//│             in let* (x%13) = foo(x%11,x%12)
//│               in x%13
//│ )
//│ Def(2, baz, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%14 = Pair(4,5)
//│   in let* (x%15) = bar(x%14)
//│     in x%15
//│ )
//│ },
//│ let* (x%16) = baz()
//│   in x%16)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [a%0,b%0], [{ESelect(x),ESelect(y)},{ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[None,Some(ICtor(Pair))],[Some(ICtor(Pair)),Some(ICtor(Pair))]],
//│ [None], 1, 
//│ let x%0 = a%0.x
//│   in let x%1 = a%0.y
//│     in let x%2 = b%0.x
//│       in let x%3 = b%0.y
//│         in let x%4 = +(x%0,x%1)
//│           in let x%5 = +(x%4,x%2)
//│             in let x%6 = +(x%5,x%3)
//│               in x%6
//│ )
//│ Def(1, bar, [c%0], [{EDirect,ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ let x%7 = Pair(0,1)
//│   in let* (x%8) = foo(x%7,c%0)
//│     in let x%9 = Pair(2,3)
//│       in let* (x%10) = foo(c%0,x%9)
//│         in let x%11 = Pair(0,1)
//│           in let x%12 = Pair(2,3)
//│             in let* (x%13) = foo(x%11,x%12)
//│               in x%13
//│ )
//│ Def(2, baz, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%14 = Pair(4,5)
//│   in let* (x%15) = bar(x%14)
//│     in x%15
//│ )
//│ },
//│ let* (x%16) = baz()
//│   in x%16)
//│ 
//│ Interpreted ------------------------------
//│ 6
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [c%0], [{ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(Pair))]],
//│ [None], 1, 
//│ let x%17 = c%0.y
//│   in let x%18 = c%0.x
//│     in let* (x%8) = foo$S%0(x%17,x%18,1,0)
//│       in let x%23 = c%0.y
//│         in let x%24 = c%0.x
//│           in let* (x%10) = foo$S%0(3,2,x%23,x%24)
//│             in let* (x%13) = foo$S%0(3,2,1,0)
//│               in x%13
//│ )
//│ Def(2, baz, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%14 = Pair(4,5)
//│   in let* (x%15) = bar(x%14)
//│     in x%15
//│ )
//│ Def(3, foo$S%0, [b%0_y,b%0_x,a%0_y,a%0_x], [{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(a%0_x,a%0_y)
//│   in let x%5 = +(x%4,b%0_x)
//│     in let x%6 = +(x%5,b%0_y)
//│       in x%6
//│ )
//│ },
//│ let* (x%16) = baz()
//│   in x%16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(2, baz, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%15) = bar$S%0(5,4)
//│   in x%15
//│ )
//│ Def(3, foo$S%0, [b%0_y,b%0_x,a%0_y,a%0_x], [{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(a%0_x,a%0_y)
//│   in let x%5 = +(x%4,b%0_x)
//│     in let x%6 = +(x%5,b%0_y)
//│       in x%6
//│ )
//│ Def(4, bar$S%0, [c%0_y,c%0_x], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%8) = foo$S%0(c%0_y,c%0_x,1,0)
//│   in let* (x%10) = foo$S%0(3,2,c%0_y,c%0_x)
//│     in let* (x%13) = foo$S%0(3,2,1,0)
//│       in x%13
//│ )
//│ },
//│ let* (x%16) = baz()
//│   in x%16)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 6
//│ 
//│ 
//│ Fuel used: 3

:GOInterp
:GraphOpt
class Pair(x, y)
fun foo() =
  let p = Pair(0, 1)
  let b = p.x
  b
foo()
//│ |#class| |Pair|(|x|,| |y|)|↵|#fun| |foo|(||)| |#=|→|#let| |p| |#=| |Pair|(|0|,| |1|)|↵|#let| |b| |#=| |p|.x|↵|b|←|↵|foo|(||)|
//│ Parsed: {class Pair(x, y,) {}; fun foo = () => {let p = Pair(0, 1,); let b = (p).x; b}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Pair, (), Tup(_: Var(x), _: Var(y)), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = Pair(0,1)
//│   in let x%1 = x%0.x
//│     in x%1
//│ )
//│ },
//│ let* (x%2) = foo()
//│   in x%2)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, Pair, [x,y]) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 0
//│ )
//│ },
//│ let* (x%2) = foo()
//│   in x%2)
//│ 
//│ Interpreted ------------------------------
//│ 0
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 0
//│ 
//│ 
//│ Fuel used: 1

:GOInterp
:GraphOpt
class S(s)
class O
fun foo() =
  bar(S(O))
fun bar(x) =
  baz(x)
fun baz(x) =
  if x is
    S(s) then s
    O then x
foo()
//│ |#class| |S|(|s|)|↵|#class| |O|↵|#fun| |foo|(||)| |#=|→|bar|(|S|(|O|)|)|←|↵|#fun| |bar|(|x|)| |#=|→|baz|(|x|)|←|↵|#fun| |baz|(|x|)| |#=|→|#if| |x| |is|→|S|(|s|)| |#then| |s|↵|O| |#then| |x|←|←|↵|foo|(||)|
//│ Parsed: {class S(s,) {}; class O {}; fun foo = () => {bar(S(O,),)}; fun bar = (x,) => {baz(x,)}; fun baz = (x,) => {if x is ‹(S(s,)) then s; (O) then x›}; foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, baz, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, S, [s]) [] {
//│ }
//│ ClassInfo(1, O, []) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = O()
//│   in let x%1 = S(x%0)
//│     in let* (x%2) = bar(x%1)
//│       in x%2
//│ )
//│ Def(1, bar, [x%3], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%4) = baz(x%3)
//│   in x%4
//│ )
//│ Def(2, baz, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%7) = x%7
//│   in case x%5 of
//│     S => let x%6 = x%5.s
//│       in jump j%0(x%6)
//│     O => jump j%0(x%5)
//│ )
//│ },
//│ let* (x%8) = foo()
//│   in x%8)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, S, [s]) [] {
//│ }
//│ ClassInfo(1, O, []) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = O()
//│   in let x%1 = S(x%0)
//│     in let* (x%2) = bar(x%1)
//│       in x%2
//│ )
//│ Def(1, bar, [x%3], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%4) = baz(x%3)
//│   in x%4
//│ )
//│ Def(2, baz, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   S => let x%6 = x%5.s
//│     in x%6
//│   O => x%5
//│ )
//│ },
//│ let* (x%8) = foo()
//│   in x%8)
//│ 
//│ Interpreted ------------------------------
//│ O()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, S, [s]) [] {
//│ }
//│ ClassInfo(1, O, []) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = O()
//│   in let x%1 = S(x%0)
//│     in let* (x%2) = bar$C%0(x%1)
//│       in x%2
//│ )
//│ Def(7, bar$C%0, [x%3], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let x%10 = x%3.s
//│   in x%10
//│ )
//│ },
//│ let* (x%8) = foo()
//│   in x%8)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, S, [s]) [] {
//│ }
//│ ClassInfo(1, O, []) [] {
//│ }
//│ }, {
//│ Def(0, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(O))], 1, 
//│ let x%0 = O()
//│   in x%0
//│ )
//│ },
//│ let* (x%8) = foo()
//│   in x%8)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ O()
//│ 
//│ 
//│ Fuel used: 3
