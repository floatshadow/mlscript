:NewDefs
:ParseOnly

class A(x) {
  class B(y) {
    fun getX = x
    fun getB1 = B1(y)
    class C(z) {
      fun inc() = x + 1
      fun getY = y
      fun getA = A(z)
      fun getB(w) = B(w)
      fun getC = new C(inc())
      fun getSelf = this
    }
  }
  class B1(y) {
    fun getX = x
    fun getY = y
    fun getB = new B(y)
    fun getB1 = new B1(y)
  }
  fun getB = new B(x)
  fun getB2(y) = B1(y)
  fun getB3(z) = getB2(z)
  fun getA = A(x)
}
//│ |#class| |A|(|x|)| |{|→|#class| |B|(|y|)| |{|→|#fun| |getX| |#=| |x|↵|#fun| |getB1| |#=| |B1|(|y|)|↵|#class| |C|(|z|)| |{|→|#fun| |inc|(||)| |#=| |x| |+| |1|↵|#fun| |getY| |#=| |y|↵|#fun| |getA| |#=| |A|(|z|)|↵|#fun| |getB|(|w|)| |#=| |B|(|w|)|↵|#fun| |getC| |#=| |#new| |C|(|inc|(||)|)|↵|#fun| |getSelf| |#=| |this|←|↵|}|←|↵|}|↵|#class| |B1|(|y|)| |{|→|#fun| |getX| |#=| |x|↵|#fun| |getY| |#=| |y|↵|#fun| |getB| |#=| |#new| |B|(|y|)|↵|#fun| |getB1| |#=| |#new| |B1|(|y|)|←|↵|}|↵|#fun| |getB| |#=| |#new| |B|(|x|)|↵|#fun| |getB2|(|y|)| |#=| |B1|(|y|)|↵|#fun| |getB3|(|z|)| |#=| |getB2|(|z|)|↵|#fun| |getA| |#=| |A|(|x|)|←|↵|}|
//│ Parsed: {class A(x,) {class B(y,) {fun getX = x; fun getB1 = B1(y,); class C(z,) {fun inc = () => +(x, 1,); fun getY = y; fun getA = A(z,); fun getB = (w,) => B(w,); fun getC = new C([inc(),]) {}; fun getSelf = this}}; class B1(y,) {fun getX = x; fun getY = y; fun getB = new B([y,]) {}; fun getB1 = new B1([y,]) {}}; fun getB = new B([x,]) {}; fun getB2 = (y,) => B1(y,); fun getB3 = (z,) => getB2(z,); fun getA = A(x,)}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit(NuFunDef(None, getX, None, [], Var(x)), NuFunDef(None, getB1, None, [], App(Var(B1), Tup(_: Var(y)))), NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit(NuFunDef(None, inc, None, [], Lam(Tup(), App(Var(+), Tup(_: Var(x), _: IntLit(1))))), NuFunDef(None, getY, None, [], Var(y)), NuFunDef(None, getA, None, [], App(Var(A), Tup(_: Var(z)))), NuFunDef(None, getB, None, [], Lam(Tup(_: Var(w)), App(Var(B), Tup(_: Var(w))))), NuFunDef(None, getC, None, [], New(Some((TypeName(C),[inc(),])), TypingUnit())), NuFunDef(None, getSelf, None, [], Var(this)))))), NuTypeDef(class, B1, (), Tup(_: Var(y)), (), None, None, TypingUnit(NuFunDef(None, getX, None, [], Var(x)), NuFunDef(None, getY, None, [], Var(y)), NuFunDef(None, getB, None, [], New(Some((TypeName(B),[y,])), TypingUnit())), NuFunDef(None, getB1, None, [], New(Some((TypeName(B1),[y,])), TypingUnit())))), NuFunDef(None, getB, None, [], New(Some((TypeName(B),[x,])), TypingUnit())), NuFunDef(None, getB2, None, [], Lam(Tup(_: Var(y)), App(Var(B1), Tup(_: Var(y))))), NuFunDef(None, getB3, None, [], Lam(Tup(_: Var(z)), App(Var(getB2), Tup(_: Var(z))))), NuFunDef(None, getA, None, [], App(Var(A), Tup(_: Var(x)))))))
//│ 

class A(x) {
  class B(y) {
    class C(z) {
      fun sum = x + y + z
    }
  }
}
//│ |#class| |A|(|x|)| |{|→|#class| |B|(|y|)| |{|→|#class| |C|(|z|)| |{|→|#fun| |sum| |#=| |x| |+| |y| |+| |z|←|↵|}|←|↵|}|←|↵|}|
//│ Parsed: {class A(x,) {class B(y,) {class C(z,) {fun sum = +(+(x, y,), z,)}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit(NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit(NuFunDef(None, sum, None, [], App(Var(+), Tup(_: App(Var(+), Tup(_: Var(x), _: Var(y))), _: Var(z)))))))))))
//│ 


class A(x) {
  class B{
    fun foo = 1
    fun bar = 11
  }
  fun getB = new B{
    fun foo = 2
    fun bar = 12
  }
  fun bar = 13
}
class C: A{
  fun getB = new B{
    fun foo = 3
    fun bar = 14
  }
  fun bar = 15
}
new C{
  fun getB = new B{
    fun foo = 4
    fun bar = 16
  }
  fun bar = 17
}
//│ |#class| |A|(|x|)| |{|→|#class| |B|{|→|#fun| |foo| |#=| |1|↵|#fun| |bar| |#=| |11|←|↵|}|↵|#fun| |getB| |#=| |#new| |B|{|→|#fun| |foo| |#=| |2|↵|#fun| |bar| |#=| |12|←|↵|}|↵|#fun| |bar| |#=| |13|←|↵|}|↵|#class| |C|#:| |A|{|→|#fun| |getB| |#=| |#new| |B|{|→|#fun| |foo| |#=| |3|↵|#fun| |bar| |#=| |14|←|↵|}|↵|#fun| |bar| |#=| |15|←|↵|}|↵|#new| |C|{|→|#fun| |getB| |#=| |#new| |B|{|→|#fun| |foo| |#=| |4|↵|#fun| |bar| |#=| |16|←|↵|}|↵|#fun| |bar| |#=| |17|←|↵|}|
//│ Parsed: {class A(x,) {class B {fun foo = 1; fun bar = 11}; fun getB = new B([]) {fun foo = 2; fun bar = 12}; fun bar = 13}; class C: A {fun getB = new B([]) {fun foo = 3; fun bar = 14}; fun bar = 15}; new C([]) {fun getB = new B([]) {fun foo = 4; fun bar = 16}; fun bar = 17}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], IntLit(1)), NuFunDef(None, bar, None, [], IntLit(11)))), NuFunDef(None, getB, None, [], New(Some((TypeName(B),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(2)), NuFunDef(None, bar, None, [], IntLit(12))))), NuFunDef(None, bar, None, [], IntLit(13)))), NuTypeDef(class, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, getB, None, [], New(Some((TypeName(B),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(3)), NuFunDef(None, bar, None, [], IntLit(14))))), NuFunDef(None, bar, None, [], IntLit(15)))), New(Some((TypeName(C),[])), TypingUnit(NuFunDef(None, getB, None, [], New(Some((TypeName(B),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(4)), NuFunDef(None, bar, None, [], IntLit(16))))), NuFunDef(None, bar, None, [], IntLit(17)))))
//│ 



class Parent<T, U, V>(x) { 
  fun foo(x: Int): T = x+1
  class Inner<W>(y: Int){
    fun bar(z: U) = foo(y)
    fun boo(z: W) = z
  }
}
//│ |#class| |Parent|‹|T|,| |U|,| |V|›|(|x|)| |{| |→|#fun| |foo|(|x|#:| |Int|)|#:| |T| |#=| |x|+|1|↵|#class| |Inner|‹|W|›|(|y|#:| |Int|)|{|→|#fun| |bar|(|z|#:| |U|)| |#=| |foo|(|y|)|↵|#fun| |boo|(|z|#:| |W|)| |#=| |z|←|↵|}|←|↵|}|
//│ Parsed: {class Parent‹T, U, V›(x,) {fun foo = (x: Int,) => +(x, 1,) : T; class Inner‹W›(y: Int,) {fun bar = (z: U,) => foo(y,); fun boo = (z: W,) => z}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Parent, ((None,TypeName(T)), (None,TypeName(U)), (None,TypeName(V))), Tup(_: Var(x)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(x: Var(Int)), Asc(App(Var(+), Tup(_: Var(x), _: IntLit(1))), TypeName(T)))), NuTypeDef(class, Inner, ((None,TypeName(W))), Tup(y: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, bar, None, [], Lam(Tup(z: Var(U)), App(Var(foo), Tup(_: Var(y))))), NuFunDef(None, boo, None, [], Lam(Tup(z: Var(W)), Var(z))))))))
//│ 


class B<T> {}
class C {}
class D(y: Int) {}
class A<T, U>(x: Int): {a1: Int} & B<T> & D(x){
  fun getA() = new C{
    fun foo(x: T) = x
  }
}
//│ |#class| |B|‹|T|›| |{||}|↵|#class| |C| |{||}|↵|#class| |D|(|y|#:| |Int|)| |{||}|↵|#class| |A|‹|T|,| |U|›|(|x|#:| |Int|)|#:| |{|a1|#:| |Int|}| |&| |B|‹|T|›| |&| |D|(|x|)|{|→|#fun| |getA|(||)| |#=| |#new| |C|{|→|#fun| |foo|(|x|#:| |T|)| |#=| |x|←|↵|}|←|↵|}|
//│ Parsed: {class B‹T› {}; class C {}; class D(y: Int,) {}; class A‹T, U›(x: Int,): {a1: Int} & B[T] & D[x] {fun getA = () => new C([]) {fun foo = (x: T,) => x}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, B, ((None,TypeName(T))), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, D, (), Tup(y: Var(Int)), (), None, None, TypingUnit()), NuTypeDef(class, A, ((None,TypeName(T)), (None,TypeName(U))), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, getA, None, [], Lam(Tup(), New(Some((TypeName(C),[])), TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(x: Var(T)), Var(x))))))))))
//│ 
// │ TypingUnit(NuTypeDef(class, B, (TypeName(T)), Tup(), (), TypingUnit()), NuTypeDef(class, C, (), Tup(), (), TypingUnit()), NuTypeDef(class, A, (TypeName(T), TypeName(U)), Tup(x: Var(Int)), (App(App(Var(&), Tup(_: Bra(rcd = true, Rcd(Var(a1) = Var(Int)})))), Tup(_: TyApp(Var(B), List(TypeName(T)))))), TypingUnit(NuFunDef(None, getA, [], Lam(Tup(), New(Some((TypeName(C),)), TypingUnit(List(fun foo = x: T, => x))))))))

class B<T> {}
class C {}
class D(y: Int) {}
class A<T, U>(x: Int) extends {a1: Int}, B<T>, D(x){
  fun getA() = new C{
    fun foo(x) = x
  }
}
//│ |#class| |B|‹|T|›| |{||}|↵|#class| |C| |{||}|↵|#class| |D|(|y|#:| |Int|)| |{||}|↵|#class| |A|‹|T|,| |U|›|(|x|#:| |Int|)| |#extends| |{|a1|#:| |Int|}|,| |B|‹|T|›|,| |D|(|x|)|{|→|#fun| |getA|(||)| |#=| |#new| |C|{|→|#fun| |foo|(|x|)| |#=| |x|←|↵|}|←|↵|}|
//│ Parsed: {class B‹T› {}; class C {}; class D(y: Int,) {}; class A‹T, U›(x: Int,): '{' {a1: Int} '}', B‹T›, D(x,) {fun getA = () => new C([]) {fun foo = (x,) => x}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, B, ((None,TypeName(T))), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, D, (), Tup(y: Var(Int)), (), None, None, TypingUnit()), NuTypeDef(class, A, ((None,TypeName(T)), (None,TypeName(U))), Tup(x: Var(Int)), (Bra(rcd = true, Rcd(Var(a1) = Var(Int))), TyApp(Var(B), List(TypeName(T))), App(Var(D), Tup(_: Var(x)))), None, None, TypingUnit(NuFunDef(None, getA, None, [], Lam(Tup(), New(Some((TypeName(C),[])), TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Var(x))))))))))
//│ 

class Child<T, U>(x): { age: T } & { name: String} {
  class Inner{
    fun foo = age
  }
  fun bar = age
  fun boo = new Inner
}
//│ |#class| |Child|‹|T|,| |U|›|(|x|)|#:| |{| |age|#:| |T| |}| |&| |{| |name|#:| |String|}| |{|→|#class| |Inner|{|→|#fun| |foo| |#=| |age|←|↵|}|↵|#fun| |bar| |#=| |age|↵|#fun| |boo| |#=| |#new| |Inner|←|↵|}|
//│ Parsed: {class Child‹T, U›(x,): {age: T} & {name: String} {class Inner {fun foo = age}; fun bar = age; fun boo = new Inner([]) {}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Child, ((None,TypeName(T)), (None,TypeName(U))), Tup(_: Var(x)), (), None, None, TypingUnit(NuTypeDef(class, Inner, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Var(age)))), NuFunDef(None, bar, None, [], Var(age)), NuFunDef(None, boo, None, [], New(Some((TypeName(Inner),[])), TypingUnit())))))
//│ 


class A(x: Int) {
  fun getA: Int = 0
  fun getA1 = 1
}
new A(0) {
  fun getA = 3
  fun getA2 = 2
}
//│ |#class| |A|(|x|#:| |Int|)| |{|→|#fun| |getA|#:| |Int| |#=| |0|↵|#fun| |getA1| |#=| |1|←|↵|}|↵|#new| |A|(|0|)| |{|→|#fun| |getA| |#=| |3|↵|#fun| |getA2| |#=| |2|←|↵|}|
//│ Parsed: {class A(x: Int,) {fun getA = 0 : Int; fun getA1 = 1}; new A([0,]) {fun getA = 3; fun getA2 = 2}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, getA, None, [], Asc(IntLit(0), TypeName(Int))), NuFunDef(None, getA1, None, [], IntLit(1)))), New(Some((TypeName(A),[0,])), TypingUnit(NuFunDef(None, getA, None, [], IntLit(3)), NuFunDef(None, getA2, None, [], IntLit(2)))))
//│ 


class A(x) {
  class B(y) {  }
}
new A(1) {
  fun getB = new B(2){
    fun getB = new B(3)
  }
}
//│ |#class| |A|(|x|)| |{|→|#class| |B|(|y|)| |{| |}|←|↵|}|↵|#new| |A|(|1|)| |{|→|#fun| |getB| |#=| |#new| |B|(|2|)|{|→|#fun| |getB| |#=| |#new| |B|(|3|)|←|↵|}|←|↵|}|
//│ Parsed: {class A(x,) {class B(y,) {}}; new A([1,]) {fun getB = new B([2,]) {fun getB = new B([3,]) {}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit()))), New(Some((TypeName(A),[1,])), TypingUnit(NuFunDef(None, getB, None, [], New(Some((TypeName(B),[2,])), TypingUnit(NuFunDef(None, getB, None, [], New(Some((TypeName(B),[3,])), TypingUnit()))))))))
//│ 



class A {
  fun getA = 0
  fun funcA = 10
}
class B: A{
  fun getA = 1
  fun funcB = 11
}
new A
new B
fun f(x) = if x is A then 0 else 1
f(new A{
  fun getA = 2
})
new B{
  fun getA = funcB
}
//│ |#class| |A| |{|→|#fun| |getA| |#=| |0|↵|#fun| |funcA| |#=| |10|←|↵|}|↵|#class| |B|#:| |A|{|→|#fun| |getA| |#=| |1|↵|#fun| |funcB| |#=| |11|←|↵|}|↵|#new| |A|↵|#new| |B|↵|#fun| |f|(|x|)| |#=| |#if| |x| |is| |A| |#then| |0| |#else| |1|↵|f|(|#new| |A|{|→|#fun| |getA| |#=| |2|←|↵|}|)|↵|#new| |B|{|→|#fun| |getA| |#=| |funcB|←|↵|}|
//│ Parsed: {class A {fun getA = 0; fun funcA = 10}; class B: A {fun getA = 1; fun funcB = 11}; new A([]) {}; new B([]) {}; fun f = (x,) => if (is(x, A,)) then 0 else 1; f(new A([]) {fun getA = 2},); new B([]) {fun getA = funcB}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, getA, None, [], IntLit(0)), NuFunDef(None, funcA, None, [], IntLit(10)))), NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, getA, None, [], IntLit(1)), NuFunDef(None, funcB, None, [], IntLit(11)))), New(Some((TypeName(A),[])), TypingUnit()), New(Some((TypeName(B),[])), TypingUnit()), NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), If(IfThen(App(Var(is), Tup(_: Var(x), _: Var(A))), IntLit(0), Some(IntLit(1))))), App(Var(f), Tup(_: New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, getA, None, [], IntLit(2)))))), New(Some((TypeName(B),[])), TypingUnit(NuFunDef(None, getA, None, [], Var(funcB)))))
//│ 


class A{
  class B{
    fun funB = 1
    fun foo = 100
  }
  class C: B{
    fun funC = 2
    fun foo = 1000
  }
  class D{
    fun funD = 3
    fun foo = 10000    
    class E: C{
      fun funE = 4
      fun foo = 100000
    }
    class F: E{
      fun funF = 5
      fun foo = 1000000
    }
  }
}
//│ |#class| |A|{|→|#class| |B|{|→|#fun| |funB| |#=| |1|↵|#fun| |foo| |#=| |100|←|↵|}|↵|#class| |C|#:| |B|{|→|#fun| |funC| |#=| |2|↵|#fun| |foo| |#=| |1000|←|↵|}|↵|#class| |D|{|→|#fun| |funD| |#=| |3|↵|#fun| |foo| |#=| |10000| |↵|#class| |E|#:| |C|{|→|#fun| |funE| |#=| |4|↵|#fun| |foo| |#=| |100000|←|↵|}|↵|#class| |F|#:| |E|{|→|#fun| |funF| |#=| |5|↵|#fun| |foo| |#=| |1000000|←|↵|}|←|↵|}|←|↵|}|
//│ Parsed: {class A {class B {fun funB = 1; fun foo = 100}; class C: B {fun funC = 2; fun foo = 1000}; class D {fun funD = 3; fun foo = 10000; class E: C {fun funE = 4; fun foo = 100000}; class F: E {fun funF = 5; fun foo = 1000000}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funB, None, [], IntLit(1)), NuFunDef(None, foo, None, [], IntLit(100)))), NuTypeDef(class, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funC, None, [], IntLit(2)), NuFunDef(None, foo, None, [], IntLit(1000)))), NuTypeDef(class, D, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funD, None, [], IntLit(3)), NuFunDef(None, foo, None, [], IntLit(10000)), NuTypeDef(class, E, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funE, None, [], IntLit(4)), NuFunDef(None, foo, None, [], IntLit(100000)))), NuTypeDef(class, F, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funF, None, [], IntLit(5)), NuFunDef(None, foo, None, [], IntLit(1000000)))))))))
//│ 


class A{
  class B{
    fun funB = 1
    fun foo = 100
  }
  class C: B{
    fun funC = 2
    fun foo = 1000
    fun getB = new B
  }
  class D{
    fun funD = 3
    fun foo = 10000    
    class E: C{
      fun funE = 4
      fun foo = 100000
      fun getD = new D
    }
    class F: E{
      fun funF = 5
      fun foo = 1000000
      fun getE = new E{
        fun foo = 0
      }
    }
  }
}
//│ |#class| |A|{|→|#class| |B|{|→|#fun| |funB| |#=| |1|↵|#fun| |foo| |#=| |100|←|↵|}|↵|#class| |C|#:| |B|{|→|#fun| |funC| |#=| |2|↵|#fun| |foo| |#=| |1000|↵|#fun| |getB| |#=| |#new| |B|←|↵|}|↵|#class| |D|{|→|#fun| |funD| |#=| |3|↵|#fun| |foo| |#=| |10000| |↵|#class| |E|#:| |C|{|→|#fun| |funE| |#=| |4|↵|#fun| |foo| |#=| |100000|↵|#fun| |getD| |#=| |#new| |D|←|↵|}|↵|#class| |F|#:| |E|{|→|#fun| |funF| |#=| |5|↵|#fun| |foo| |#=| |1000000|↵|#fun| |getE| |#=| |#new| |E|{|→|#fun| |foo| |#=| |0|←|↵|}|←|↵|}|←|↵|}|←|↵|}|
//│ Parsed: {class A {class B {fun funB = 1; fun foo = 100}; class C: B {fun funC = 2; fun foo = 1000; fun getB = new B([]) {}}; class D {fun funD = 3; fun foo = 10000; class E: C {fun funE = 4; fun foo = 100000; fun getD = new D([]) {}}; class F: E {fun funF = 5; fun foo = 1000000; fun getE = new E([]) {fun foo = 0}}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funB, None, [], IntLit(1)), NuFunDef(None, foo, None, [], IntLit(100)))), NuTypeDef(class, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funC, None, [], IntLit(2)), NuFunDef(None, foo, None, [], IntLit(1000)), NuFunDef(None, getB, None, [], New(Some((TypeName(B),[])), TypingUnit())))), NuTypeDef(class, D, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funD, None, [], IntLit(3)), NuFunDef(None, foo, None, [], IntLit(10000)), NuTypeDef(class, E, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funE, None, [], IntLit(4)), NuFunDef(None, foo, None, [], IntLit(100000)), NuFunDef(None, getD, None, [], New(Some((TypeName(D),[])), TypingUnit())))), NuTypeDef(class, F, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, funF, None, [], IntLit(5)), NuFunDef(None, foo, None, [], IntLit(1000000)), NuFunDef(None, getE, None, [], New(Some((TypeName(E),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(0))))))))))))
//│ 


class A{
  class B{
    fun foo = 1
  }
  fun bar = new B
}
new A
//│ |#class| |A|{|→|#class| |B|{|→|#fun| |foo| |#=| |1|←|↵|}|↵|#fun| |bar| |#=| |#new| |B|←|↵|}|↵|#new| |A|
//│ Parsed: {class A {class B {fun foo = 1}; fun bar = new B([]) {}}; new A([]) {}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuTypeDef(class, B, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], IntLit(1)))), NuFunDef(None, bar, None, [], New(Some((TypeName(B),[])), TypingUnit())))), New(Some((TypeName(A),[])), TypingUnit()))
//│ 


class A(x) {
  fun foo = 0
  fun bar = x
}
let x = new A{
  fun foo = 1
  fun newFun = 2
  fun bar = new A(foo){
    fun foo = bar + 1
    fun bar2 = newFun + 1
  }
}
//│ |#class| |A|(|x|)| |{|→|#fun| |foo| |#=| |0|↵|#fun| |bar| |#=| |x|←|↵|}|↵|#let| |x| |#=| |#new| |A|{|→|#fun| |foo| |#=| |1|↵|#fun| |newFun| |#=| |2|↵|#fun| |bar| |#=| |#new| |A|(|foo|)|{|→|#fun| |foo| |#=| |bar| |+| |1|↵|#fun| |bar2| |#=| |newFun| |+| |1|←|↵|}|←|↵|}|
//│ Parsed: {class A(x,) {fun foo = 0; fun bar = x}; let x = new A([]) {fun foo = 1; fun newFun = 2; fun bar = new A([foo,]) {fun foo = +(bar, 1,); fun bar2 = +(newFun, 1,)}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], IntLit(0)), NuFunDef(None, bar, None, [], Var(x)))), NuFunDef(Some(false), x, None, [], New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(1)), NuFunDef(None, newFun, None, [], IntLit(2)), NuFunDef(None, bar, None, [], New(Some((TypeName(A),[foo,])), TypingUnit(NuFunDef(None, foo, None, [], App(Var(+), Tup(_: Var(bar), _: IntLit(1)))), NuFunDef(None, bar2, None, [], App(Var(+), Tup(_: Var(newFun), _: IntLit(1)))))))))))
//│ 

class A {}
new A{
  fun foo = 1
  fun bar = new A{
    fun foo1 = foo
    fun bar1 = new A{
      fun foo2 = foo
      fun bar2 = new A{
        fun foo3 = foo
        fun bar3 = new A{
          fun foo4 = foo
          fun bar4 = 0
        }
      }
    }
  }
}
//│ |#class| |A| |{||}|↵|#new| |A|{|→|#fun| |foo| |#=| |1|↵|#fun| |bar| |#=| |#new| |A|{|→|#fun| |foo1| |#=| |foo|↵|#fun| |bar1| |#=| |#new| |A|{|→|#fun| |foo2| |#=| |foo|↵|#fun| |bar2| |#=| |#new| |A|{|→|#fun| |foo3| |#=| |foo|↵|#fun| |bar3| |#=| |#new| |A|{|→|#fun| |foo4| |#=| |foo|↵|#fun| |bar4| |#=| |0|←|↵|}|←|↵|}|←|↵|}|←|↵|}|←|↵|}|
//│ Parsed: {class A {}; new A([]) {fun foo = 1; fun bar = new A([]) {fun foo1 = foo; fun bar1 = new A([]) {fun foo2 = foo; fun bar2 = new A([]) {fun foo3 = foo; fun bar3 = new A([]) {fun foo4 = foo; fun bar4 = 0}}}}}}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo, None, [], IntLit(1)), NuFunDef(None, bar, None, [], New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo1, None, [], Var(foo)), NuFunDef(None, bar1, None, [], New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo2, None, [], Var(foo)), NuFunDef(None, bar2, None, [], New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo3, None, [], Var(foo)), NuFunDef(None, bar3, None, [], New(Some((TypeName(A),[])), TypingUnit(NuFunDef(None, foo4, None, [], Var(foo)), NuFunDef(None, bar4, None, [], IntLit(0)))))))))))))))))
//│ 

