:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x), _: Var(y), _: Var(z)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(m), _: Var(n)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x,y,z]) [] {
//│ }
//│ ClassInfo(1, B, [m,n]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%8) = let x%9 = B(1,2)
//│       in let join j%1(x%15) = let x%16 = +(x%8,x%15)
//│             in x%16
//│         in case x%9 of
//│           A => let x%10 = x%9.z
//│             in let x%11 = x%9.y
//│               in let x%12 = x%9.x
//│                 in jump j%1(3)
//│           B => let x%13 = x%9.n
//│             in let x%14 = x%9.m
//│               in jump j%1(4)
//│   in case t%0 of
//│     A => let x%0 = t%0.z
//│       in let x%1 = t%0.y
//│         in let x%2 = t%0.x
//│           in let x%3 = *(x%1,x%0)
//│             in let x%4 = +(x%2,x%3)
//│               in jump j%0(x%4)
//│     B => let x%5 = t%0.n
//│       in let x%6 = t%0.m
//│         in let x%7 = -(x%6,x%5)
//│           in jump j%0(x%7)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%17 = A(6,7,8)
//│   in let* (x%18) = complex_foo(x%17)
//│     in let x%19 = B(9,10)
//│       in let* (x%20) = complex_foo(x%19)
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar()
//│   in x%21)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]) [] {
//│ }
//│ ClassInfo(1, B, [m,n]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{EDestruct,EDirect,ESelect(m),ESelect(n),ESelect(x),ESelect(y),ESelect(z)}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(ICtor(B))]],
//│ [None], 1, 
//│ case t%0 of
//│   A => let x%0 = t%0.z
//│     in let x%1 = t%0.y
//│       in let x%2 = t%0.x
//│         in let x%3 = *(x%1,x%0)
//│           in let x%4 = +(x%2,x%3)
//│             in jump j%0(x%4)
//│   B => let x%5 = t%0.n
//│     in let x%6 = t%0.m
//│       in let x%7 = -(x%6,x%5)
//│         in jump j%0(x%7)
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%17 = A(6,7,8)
//│   in let* (x%18) = complex_foo(x%17)
//│     in let x%19 = B(9,10)
//│       in let* (x%20) = complex_foo(x%19)
//│         in x%20
//│ )
//│ Def(2, @join j%0, [x%8], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = B(1,2)
//│   in case x%9 of
//│     A => jump j%1(3)
//│     B => jump j%1(4)
//│ )
//│ Def(3, @join j%1, [x%15], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%16 = +(x%8,x%15)
//│   in x%16
//│ )
//│ },
//│ let* (x%21) = bar()
//│   in x%21)
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]) [] {
//│ }
//│ ClassInfo(1, B, [m,n]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%18) = complex_foo$D%0$S%0(8,7,6)
//│   in let* (x%20) = complex_foo$D%1$S%0(9,10)
//│     in x%20
//│ )
//│ Def(2, @join j%0, [x%8], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%9 = B(1,2)
//│   in case x%9 of
//│     A => jump j%1(3)
//│     B => jump j%1(4)
//│ )
//│ Def(3, @join j%1, [x%15], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%16 = +(x%8,x%15)
//│   in x%16
//│ )
//│ Def(7, complex_foo$D%0$S%0, [t%0_z,t%0_y,t%0_x], [{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = *(t%0_y,t%0_z)
//│   in let x%4 = +(t%0_x,x%3)
//│     in jump j%0(x%4)
//│ )
//│ Def(8, complex_foo$D%1$S%0, [t%0_m,t%0_n], [{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%7 = -(t%0_m,t%0_n)
//│   in jump j%0(x%7)
//│ )
//│ },
//│ let* (x%21) = bar()
//│   in x%21)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then y
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |y|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then y; (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(w), _: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in let join j%0(x%9) = let x%10 = A(5,x%9)
//│           in let x%11 = B(6)
//│             in let join j%1(x%23) = let join j%3(x%33) = x%33
//│                   in case x%10 of
//│                     A => let x%24 = x%10.x
//│                       in let x%25 = x%10.w
//│                         in jump j%3(x%25)
//│                     B => let x%26 = x%10.y
//│                       in jump j%3(4)
//│                     C => let x%27 = x%10.z
//│                       in let join j%4(x%32) = jump j%3(x%32)
//│                         in case x%11 of
//│                           A => let x%28 = x%11.x
//│                             in let x%29 = x%11.w
//│                               in jump j%4(x%29)
//│                           B => let x%30 = x%11.y
//│                             in jump j%4(7)
//│                           C => let x%31 = x%11.z
//│                             in jump j%4(8)
//│               in case x%9 of
//│                 A => let x%12 = x%9.x
//│                   in let x%13 = x%9.w
//│                     in let x%14 = +(x%13,x%0)
//│                       in let x%15 = +(x%14,x%1)
//│                         in let join j%2(x%20) = jump j%1(x%20)
//│                           in case x%12 of
//│                             A => let x%16 = x%12.x
//│                               in let x%17 = x%12.w
//│                                 in jump j%2(x%17)
//│                             B => let x%18 = x%12.y
//│                               in jump j%2(x%15)
//│                             C => let x%19 = x%12.z
//│                               in jump j%2(0)
//│                 B => let x%21 = x%9.y
//│                   in jump j%1(2)
//│                 C => let x%22 = x%9.z
//│                   in jump j%1(3)
//│       in case t%0 of
//│         A => let x%2 = t%0.x
//│           in let x%3 = t%0.w
//│             in jump j%0(x%2)
//│         B => let x%4 = t%0.y
//│           in let x%5 = +(x%4,x%1)
//│             in let x%6 = B(x%5)
//│               in jump j%0(x%6)
//│         C => let x%7 = t%0.z
//│           in let x%8 = C(0)
//│             in jump j%0(x%8)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%34 = B(10)
//│   in let x%35 = A(9,x%34)
//│     in let x%36 = A(10,x%35)
//│       in let* (x%37) = complex_foo(x%36)
//│         in x%37
//│ )
//│ },
//│ let* (x%38) = bar()
//│   in x%38)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{EDestruct,EDirect,ESelect(x),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ [None], 1, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in case t%0 of
//│       A => let x%2 = t%0.x
//│         in jump j%0(x%2)
//│       B => let x%4 = t%0.y
//│         in let x%5 = +(x%4,x%1)
//│           in let x%6 = B(x%5)
//│             in jump j%0(x%6)
//│       C => let x%8 = C(0)
//│         in jump j%0(x%8)
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%34 = B(10)
//│   in let x%35 = A(9,x%34)
//│     in let x%36 = A(10,x%35)
//│       in let* (x%37) = complex_foo(x%36)
//│         in x%37
//│ )
//│ Def(2, @join j%0, [x%9], [{EDestruct,EDirect,ESelect(w),ESelect(x)}],
//│ S: None,
//│ I: [[Some(ICtor(B))],[Some(ICtor(C))]],
//│ [None], 1, 
//│ let x%10 = A(5,x%9)
//│   in let x%11 = B(6)
//│     in case x%9 of
//│       A => let x%12 = x%9.x
//│         in let x%13 = x%9.w
//│           in let x%14 = +(x%13,x%0)
//│             in let x%15 = +(x%14,x%1)
//│               in case x%12 of
//│                 A => let x%17 = x%12.w
//│                   in jump j%1(x%17)
//│                 B => jump j%1(x%15)
//│                 C => jump j%1(0)
//│       B => jump j%1(2)
//│       C => jump j%1(3)
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%10 of
//│   A => let x%25 = x%10.w
//│     in x%25
//│   B => 4
//│   C => case x%11 of
//│     A => let x%29 = x%11.w
//│       in x%29
//│     B => 7
//│     C => 8
//│ )
//│ },
//│ let* (x%38) = bar()
//│   in x%38)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%34 = B(10)
//│   in let x%35 = A(9,x%34)
//│     in let x%36 = A(10,x%35)
//│       in let* (x%54,x%55,x%56) = complex_foo$P%0(x%36)
//│         in let* (x%37) = complex_foo$D%0(x%54,x%55,x%56)
//│           in x%37
//│ )
//│ Def(2, @join j%0, [x%9], [{EDestruct,EDirect,ESelect(w),ESelect(x)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = A(5,x%9)
//│   in let x%11 = B(6)
//│     in case x%9 of
//│       A => let x%12 = x%9.x
//│         in let x%13 = x%9.w
//│           in let x%14 = +(x%13,x%0)
//│             in let x%15 = +(x%14,x%1)
//│               in case x%12 of
//│                 A => let x%17 = x%12.w
//│                   in jump j%1(x%17)
//│                 B => jump j%1(x%15)
//│                 C => jump j%1(0)
//│       B => jump j%1(2)
//│       C => jump j%1(3)
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%10 of
//│   A => let x%25 = x%10.w
//│     in x%25
//│   B => 4
//│   C => case x%11 of
//│     A => let x%29 = x%11.w
//│       in x%29
//│     B => 7
//│     C => 8
//│ )
//│ Def(11, complex_foo$P%0, [t%0], [{EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ [None,None,None], 3, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in t%0,x%0,x%1
//│ )
//│ Def(12, complex_foo$D%0, [t%0,x%0,x%1], [{ESelect(x)},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%2 = t%0.x
//│   in jump j%0(x%2)
//│ )
//│ },
//│ let* (x%38) = bar()
//│   in x%38)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 2

:GOInterp
:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then A(x, C(0))
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |A|(|x|,| |C|(|0|)|)|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then A(x, C(0,),); (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(w), _: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(y)), (), None, None, TypingUnit()), NuTypeDef(class, C, (), Tup(_: Var(z)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in let join j%0(x%11) = let x%12 = A(5,x%11)
//│           in let x%13 = B(6)
//│             in let join j%1(x%25) = let join j%3(x%35) = x%35
//│                   in case x%12 of
//│                     A => let x%26 = x%12.x
//│                       in let x%27 = x%12.w
//│                         in jump j%3(x%27)
//│                     B => let x%28 = x%12.y
//│                       in jump j%3(4)
//│                     C => let x%29 = x%12.z
//│                       in let join j%4(x%34) = jump j%3(x%34)
//│                         in case x%13 of
//│                           A => let x%30 = x%13.x
//│                             in let x%31 = x%13.w
//│                               in jump j%4(x%31)
//│                           B => let x%32 = x%13.y
//│                             in jump j%4(7)
//│                           C => let x%33 = x%13.z
//│                             in jump j%4(8)
//│               in case x%11 of
//│                 A => let x%14 = x%11.x
//│                   in let x%15 = x%11.w
//│                     in let x%16 = +(x%15,x%0)
//│                       in let x%17 = +(x%16,x%1)
//│                         in let join j%2(x%22) = jump j%1(x%22)
//│                           in case x%14 of
//│                             A => let x%18 = x%14.x
//│                               in let x%19 = x%14.w
//│                                 in jump j%2(x%19)
//│                             B => let x%20 = x%14.y
//│                               in jump j%2(x%17)
//│                             C => let x%21 = x%14.z
//│                               in jump j%2(0)
//│                 B => let x%23 = x%11.y
//│                   in jump j%1(2)
//│                 C => let x%24 = x%11.z
//│                   in jump j%1(3)
//│       in case t%0 of
//│         A => let x%2 = t%0.x
//│           in let x%3 = t%0.w
//│             in let x%4 = C(0)
//│               in let x%5 = A(x%3,x%4)
//│                 in jump j%0(x%5)
//│         B => let x%6 = t%0.y
//│           in let x%7 = +(x%6,x%1)
//│             in let x%8 = B(x%7)
//│               in jump j%0(x%8)
//│         C => let x%9 = t%0.z
//│           in let x%10 = C(0)
//│             in jump j%0(x%10)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%36 = B(10)
//│   in let x%37 = A(9,x%36)
//│     in let x%38 = A(10,x%37)
//│       in let* (x%39) = complex_foo(x%38)
//│         in x%39
//│ )
//│ },
//│ let* (x%40) = bar()
//│   in x%40)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{EDestruct,EDirect,ESelect(w),ESelect(y)}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ [None], 1, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in case t%0 of
//│       A => let x%3 = t%0.w
//│         in let x%4 = C(0)
//│           in let x%5 = A(x%3,x%4)
//│             in jump j%0(x%5)
//│       B => let x%6 = t%0.y
//│         in let x%7 = +(x%6,x%1)
//│           in let x%8 = B(x%7)
//│             in jump j%0(x%8)
//│       C => let x%10 = C(0)
//│         in jump j%0(x%10)
//│ )
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%36 = B(10)
//│   in let x%37 = A(9,x%36)
//│     in let x%38 = A(10,x%37)
//│       in let* (x%39) = complex_foo(x%38)
//│         in x%39
//│ )
//│ Def(2, @join j%0, [x%11], [{EDestruct,EDirect,ESelect(w),ESelect(x)}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(ICtor(B))],[Some(ICtor(C))]],
//│ [None], 1, 
//│ let x%12 = A(5,x%11)
//│   in let x%13 = B(6)
//│     in case x%11 of
//│       A => let x%14 = x%11.x
//│         in let x%15 = x%11.w
//│           in let x%16 = +(x%15,x%0)
//│             in let x%17 = +(x%16,x%1)
//│               in case x%14 of
//│                 A => let x%19 = x%14.w
//│                   in jump j%1(x%19)
//│                 B => jump j%1(x%17)
//│                 C => jump j%1(0)
//│       B => jump j%1(2)
//│       C => jump j%1(3)
//│ )
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%12 of
//│   A => let x%27 = x%12.w
//│     in x%27
//│   B => 4
//│   C => case x%13 of
//│     A => let x%31 = x%13.w
//│       in x%31
//│     B => 7
//│     C => 8
//│ )
//│ },
//│ let* (x%40) = bar()
//│   in x%40)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ ClassInfo(2, C, [z]) [] {
//│ }
//│ }, {
//│ Def(1, bar, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%36 = B(10)
//│   in let x%37 = A(9,x%36)
//│     in let x%38 = A(10,x%37)
//│       in let* (x%61,x%62,x%63) = complex_foo$P%0(x%38)
//│         in let* (x%39) = complex_foo$D%0(x%61,x%62,x%63)
//│           in x%39
//│ )
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%12 of
//│   A => let x%27 = x%12.w
//│     in x%27
//│   B => 4
//│   C => case x%13 of
//│     A => let x%31 = x%13.w
//│       in x%31
//│     B => 7
//│     C => 8
//│ )
//│ Def(7, j%0$P%0, [x%11], [{EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ [Some(ICtor(A)),None,None,Some(ICtor(B)),None], 5, 
//│ let x%12 = A(5,x%11)
//│   in let x%13 = B(6)
//│     in x%12,x%1,x%0,x%13,x%11
//│ )
//│ Def(8, j%0$D%0, [x%12,x%1,x%0,x%13,x%11], [{EDestruct,EDirect,ESelect(w)},{EDirect},{EDirect},{EDestruct,EDirect,ESelect(w)},{ESelect(w),ESelect(x)}],
//│ S: None,
//│ I: [[None,None,None,Some(ICtor(A)),Some(ICtor(B))]],
//│ [None], 1, 
//│ let x%14 = x%11.x
//│   in let x%15 = x%11.w
//│     in let x%16 = +(x%15,x%0)
//│       in let x%17 = +(x%16,x%1)
//│         in case x%14 of
//│           A => let x%19 = x%14.w
//│             in jump j%1(x%19)
//│           B => jump j%1(x%17)
//│           C => jump j%1(0)
//│ )
//│ Def(11, complex_foo$P%0, [t%0], [{EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ [None,None,None], 3, 
//│ let x%0 = +(1,2)
//│   in let x%1 = *(1,2)
//│     in t%0,x%0,x%1
//│ )
//│ Def(12, complex_foo$D%0, [t%0,x%0,x%1], [{ESelect(w)},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%3 = t%0.w
//│   in let x%4 = C(0)
//│     in let x%5 = A(x%3,x%4)
//│       in let* (x%69,x%70,x%71,x%72,x%73) = j%0$P%0(x%5)
//│         in jump j%0$D%0(x%69,x%70,x%71,x%72,x%73)
//│ )
//│ },
//│ let* (x%40) = bar()
//│   in x%40)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 2
