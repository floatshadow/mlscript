:NewDefs

:AllowRuntimeErrors
fun foo() =
  let local(x) =
    class Foo {
      fun bar = x + foo()
    }
    (new Foo()).bar
  local(1)
foo()
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Blk(...))), App(Var(foo), Tup()))
//│ fun foo: () -> Int
//│ Int
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

fun foo(f) = 
  f(1)
foo(x => x+1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(f)), Blk(...))), App(Var(foo), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(1)))))))
//│ fun foo: forall 'a. (1 -> 'a) -> 'a
//│ Int
//│ res
//│     = 2

fun foo(x) = 
  let bar(f) = 
    f(x)
  bar(y => y+x)
foo(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: IntLit(1))))
//│ fun foo: Int -> Int
//│ Int
//│ res
//│     = 2

fun foo(f) = 
    f(1)
class A(y: Int){
  fun bar(z) = y+z
}
fun app(a) = 
  foo(z => a.bar(z))
app(new A(1))
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(f)), Blk(...))), NuTypeDef(class, A, (), Tup(y: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, bar, None, [], Lam(Tup(_: Var(z)), App(Var(+), Tup(_: Var(y), _: Var(z))))))), NuFunDef(None, app, None, [], Lam(Tup(_: Var(a)), Blk(...))), App(Var(app), Tup(_: New(Some((TypeName(A),[1,])), TypingUnit()))))
//│ fun foo: forall 'a. (1 -> 'a) -> 'a
//│ class A(y: Int) {
//│   fun bar: Int -> Int
//│ }
//│ fun app: forall 'b. {bar: 1 -> 'b} -> 'b
//│ Int
//│ res
//│     = 2
