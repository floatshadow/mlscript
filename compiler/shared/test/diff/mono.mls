
:NewDefs

:mono
fun f(x: Int) = if x then 42 else 1337
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(x: Var(Int)), If(IfThen(Var(x), IntLit(42), Some(IntLit(1337))))))
//│ fun f: (x: Int) -> (1337 | 42)

:mono
fun foo() = 42
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), IntLit(42))))
//│ fun foo: () -> 42

:mono
fun foo(x, #b) = if b then x else 1337
let a = foo(42, true)
let b = foo(23, false)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x), _: Var(b)), If(IfThen(Var(b), Var(x), Some(IntLit(1337))))), NuFunDef(Some(false), a, None, [], App(Var(foo), Tup(_: IntLit(42), _: Var(true)))), NuFunDef(Some(false), b, None, [], App(Var(foo), Tup(_: IntLit(23), _: Var(false)))))
//│ fun foo: forall 'a. ('a, Object) -> (1337 | 'a)
//│ let a: 1337 | 42
//│ let b: 1337 | 23
//│ a
//│   = 42
//│ b
//│   = 1337

:mono
let x = 42 + 1337
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), x, None, [], App(Var(+), Tup(_: IntLit(42), _: IntLit(1337)))))
//│ let x: Int
//│ x
//│   = 1379

//:mono
//:e // FIXME: Mutable Parameters
//class Bar(#x)
//fun foo(#b) = b
//let a = foo(new Bar(1))
//let b = foo(new Bar(2))

//:mono
//:w // FIXME: Mutable Parameters
//class OneInt(#a){
//  fun inc() = a+1
//}
//(new OneInt(1)).inc()

//:mono
//:e // FIXME: Mutable Parameters
//class OneInt(#a){
//  fun add(x) = 
//    new OneInt(a+x.a)
//}
//(new OneInt(1)).add(new OneInt(2))

:mono
if true then 1 else 0
if 1+1 > 1 then 1 - 1 else 1*1
//│ Parsed:
//│ TypingUnit(If(IfThen(Var(true), IntLit(1), Some(IntLit(0))), If(IfThen(App(Var(>), Tup(_: App(Var(+), Tup(_: IntLit(1), _: IntLit(1))), _: IntLit(1))), App(Var(-), Tup(_: IntLit(1), _: IntLit(1))), Some(App(Var(*), Tup(_: IntLit(1), _: IntLit(1))))))
//│ Int
//│ res
//│     = 1
//│ res
//│     = 0

:mono
if(b) then 1 else 2
//│ Parsed:
//│ TypingUnit(If(IfThen(Bra(rcd = false, Var(b)), IntLit(1), Some(IntLit(2))))
//│ 1 | 2
//│ res
//│     = 2

:mono
((f, g) => f(g))(f => f, true)
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Lam(Tup(_: Var(f), _: Var(g)), App(Var(f), Tup(_: Var(g))))), Tup(_: Lam(Tup(_: Var(f)), Var(f)), _: Var(true))))
//│ true
//│ res
//│     = true


:mono
(b => if b then true else false) (true)
//│ Parsed:
//│ TypingUnit(App(Bra(rcd = false, Lam(Tup(_: Var(b)), If(IfThen(Var(b), Var(true), Some(Var(false))))), Tup(_: Var(true))))
//│ Bool
//│ res
//│     = true

:mono
fun f(x) =
  if(x > 0) then x+1 else x - 1
f(2)+3
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(+), Tup(_: App(Var(f), Tup(_: IntLit(2))), _: IntLit(3))))
//│ fun f: Int -> Int
//│ Int
//│ res
//│     = 6

:mono
fun fac(n) = 
  if (n > 1) then fac(n - 1) * n else 1
fac(2)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, fac, None, [], Lam(Tup(_: Var(n)), Blk(...))), App(Var(fac), Tup(_: IntLit(2))))
//│ fun fac: Int -> Int
//│ Int
//│ res
//│     = 2

:mono
class List(val l: List | Nil | undefined, val hasTail: Bool)  {}
class Nil(val l: List | Nil | undefined, val hasTail: Bool)  {}
fun count(lst) =
  if lst.hasTail then
    let l = lst.l
    if l is undefined then 1 else count(l)+1
  else 0
count(new List(new List(new Nil(undefined, false), true), true))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(l: App(Var(|), Tup(_: App(Var(|), Tup(_: Var(List), _: Var(Nil))), _: UnitLit(true))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(l: App(Var(|), Tup(_: App(Var(|), Tup(_: Var(List), _: Var(Nil))), _: UnitLit(true))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuFunDef(None, count, None, [], Lam(Tup(_: Var(lst)), Blk(...))), App(Var(count), Tup(_: New(Some((TypeName(List),[new List([new Nil([undefined, false,]) {}, true,]) {}, true,])), TypingUnit()))))
//│ class List(l: List | Nil | (), hasTail: Bool)
//│ class Nil(l: List | Nil | (), hasTail: Bool)
//│ fun count: forall 'a. 'a -> Int
//│ Int
//│ where
//│   'a <: {hasTail: Object, l: Object & 'a & ~() | ()}
//│ res
//│     = 2

//:mono
//class Cons(e, tail){
//  fun gen() = new Cons(e, tail.gen())
//}
//class Nil(){
//  fun gen() = new Cons(0, this)
//}
//fun generate(x) = 
//  if x > 0 then new Cons(x, generate(x+1)) else new Nil()
//generate(10).gen()

:mono
class List(e: Int, tail: List | Nil) {
  fun map: (Int -> Int) -> List 
  fun map(f)= new List(f(e), tail.map(f))
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun map(f) = this
  fun count() = 0
}
fun add2(x) = x+2
(new List(1, new List(2, new Nil()))).map(x => x+1).map(x => add2(x))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(List), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, map, None, [], PolyType(List(),Function(Tuple(List((None,Field(None,Function(Tuple(List((None,Field(None,TypeName(Int))))),TypeName(Int)))))),TypeName(List)))), NuFunDef(None, map, None, [], Lam(Tup(_: Var(f)), New(Some((TypeName(List),[f(e,), (tail).map(f,),])), TypingUnit()))), NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, map, None, [], Lam(Tup(_: Var(f)), Var(this))), NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, add2, None, [], Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(2))))), App(Sel(App(Sel(Bra(rcd = false, New(Some((TypeName(List),[1, new List([2, new Nil([]) {},]) {},])), TypingUnit())), map), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(1)))))), map), Tup(_: Lam(Tup(_: Var(x)), App(Var(add2), Tup(_: Var(x)))))))
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│   fun map: (Int -> Int) -> List
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│   fun map: anything -> Nil
//│ }
//│ fun add2: Int -> Int
//│ List
//│ res
//│     = List {}

:mono
:AllowRuntimeErrors
class List(e: Int, tail: List | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = x.count()
fun generate(x) = 
  if x > 0 then new List(x, generate(x+1)) else new Nil()
foo(new List(1, new List(2, new Nil())))
foo(generate(1))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, List, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(List), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), App(Sel(Var(x), count), Tup()))), NuFunDef(None, generate, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: New(Some((TypeName(List),[1, new List([2, new Nil([]) {},]) {},])), TypingUnit()))), App(Var(foo), Tup(_: App(Var(generate), Tup(_: IntLit(1))))))
//│ class List(e: Int, tail: List | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: forall 'a. {count: () -> 'a} -> 'a
//│ fun generate: Int -> (List | Nil)
//│ Int
//│ res
//│     = 2
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
fun foo(x) = 
  (f => f(x))(z => z+1)
foo(2)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: IntLit(2))))
//│ fun foo: Int -> Int
//│ Int
//│ res
//│     = 3

:mono
fun f(x) =
  (y => f(x+y))(x+1)
f(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(f), Tup(_: IntLit(1))))
//│ fun f: Int -> nothing
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


:mono
fun f(x) = f(x)
f(0)
f(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), App(Var(f), Tup(_: Var(x))))), App(Var(f), Tup(_: IntLit(0))), App(Var(f), Tup(_: IntLit(1))))
//│ fun f: anything -> nothing
//│ nothing
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
class Cons(e: 'A, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
class Lambda(){
  fun apply(l) = 
    l.count()
}
class Lambda2(a: Int){
  fun apply(l) = 
    (new Cons(a, l)).count()
}
fun foo(x) = 
  x.apply(new Cons(1, new Nil())) + x.apply(new Nil())
foo(new Lambda())
foo(new Lambda2(2))
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(e: Var('A), tail: App(Var(|), Tup(_: Var(Cons), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuTypeDef(class, Lambda, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, apply, None, [], Lam(Tup(_: Var(l)), Blk(...))))), NuTypeDef(class, Lambda2, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, apply, None, [], Lam(Tup(_: Var(l)), Blk(...))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: New(Some((TypeName(Lambda),[])), TypingUnit()))), App(Var(foo), Tup(_: New(Some((TypeName(Lambda2),[2,])), TypingUnit()))))
//│ class Cons(e: nothing, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ class Lambda() {
//│   fun apply: forall 'a. {count: () -> 'a} -> 'a
//│ }
//│ class Lambda2(a: Int) {
//│   fun apply: (Cons | Nil) -> Int
//│ }
//│ fun foo: {apply: (Cons | Nil) -> Int} -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3

:mono
class Cons(e: Int, tail: Cons | Nil) {
  fun count(): Int
  fun count() = 1 + tail.count()
}
class Nil() {
  fun count() = 0
}
fun foo(x) = 
  x(new Cons(1, new Nil())) + x(new Nil())
foo(l => l.count())
foo(l => (new Cons(2, l)).count())
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(e: Var(Int), tail: App(Var(|), Tup(_: Var(Cons), _: Var(Nil)))), (), None, None, TypingUnit(NuFunDef(None, count, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, count, None, [], Lam(Tup(), App(Var(+), Tup(_: IntLit(1), _: App(Sel(Var(tail), count), Tup()))))))), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, count, None, [], Lam(Tup(), IntLit(0))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Var(l), count), Tup())))), App(Var(foo), Tup(_: Lam(Tup(_: Var(l)), App(Sel(Bra(rcd = false, New(Some((TypeName(Cons),[2, l,])), TypingUnit())), count), Tup())))))
//│ class Cons(e: Int, tail: Cons | Nil) {
//│   fun count: () -> Int
//│ }
//│ class Nil() {
//│   fun count: () -> 0
//│ }
//│ fun foo: ((Cons | Nil) -> Int) -> Int
//│ Int
//│ res
//│     = 1
//│ res
//│     = 3

:mono
class Exp() {
  virtual fun derive(x: Int): Exp
  virtual fun derive(x: Int) = Exp()
  virtual fun isEmpty(): Bool
  virtual fun isEmpty() = false
}
class E() extends Exp {
  fun derive(x) = 
    new E
  fun isEmpty() = 
    false
}
class Ep() extends Exp {
  fun derive(x) = 
    new E
  fun isEmpty() = 
    true
}
class Ch(i: Int) extends Exp {
  fun derive(x) = 
    if x == i then new Ep else new E
  fun isEmpty() = 
    false
}
class A(e1: Exp, e2: Exp) extends Exp {
  fun derive(x) = 
    new A(e1.derive(x), e2.derive(x))
  fun isEmpty() = 
    e1.isEmpty() || e2.isEmpty()
}
class C(e1: Exp, e2: Exp) extends Exp {
  fun derive(x) = 
    if e1.isEmpty() then new A(new C(e1.derive(x), e2), e2.derive(x)) else new C(e1.derive(x), e2)
  fun isEmpty() = 
    e1.isEmpty() && e2.isEmpty()
}
(new C(new Ch(1), new A(new Ch(2), new Ch(3)))).derive(0).isEmpty()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Exp, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, derive, None, [], PolyType(List(),Function(Tuple(List((Some(x),Field(None,TypeName(Int))))),TypeName(Exp)))), NuFunDef(None, derive, None, [], Lam(Tup(x: Var(Int)), App(Var(Exp), Tup()))), NuFunDef(None, isEmpty, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Bool)))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Var(false))))), NuTypeDef(class, E, (), Tup(), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ep, (), Tup(), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, Ch, (), Tup(i: Var(Int)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, A, (), Tup(e1: Var(Exp), e2: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), NuTypeDef(class, C, (), Tup(e1: Var(Exp), e2: Var(Exp)), (Var(Exp)), None, None, TypingUnit(NuFunDef(None, derive, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, isEmpty, None, [], Lam(Tup(), Blk(...))))), App(Sel(App(Sel(Bra(rcd = false, New(Some((TypeName(C),[new Ch([1,]) {}, new A([new Ch([2,]) {}, new Ch([3,]) {},]) {},])), TypingUnit())), derive), Tup(_: IntLit(0))), isEmpty), Tup()))
//│ class Exp() {
//│   fun derive: (x: Int) -> Exp
//│   fun isEmpty: () -> Bool
//│ }
//│ class E() extends Exp {
//│   fun derive: anything -> E
//│   fun isEmpty: () -> false
//│ }
//│ class Ep() extends Exp {
//│   fun derive: anything -> E
//│   fun isEmpty: () -> true
//│ }
//│ class Ch(i: Int) extends Exp {
//│   fun derive: Num -> (E | Ep)
//│   fun isEmpty: () -> false
//│ }
//│ class A(e1: Exp, e2: Exp) extends Exp {
//│   fun derive: Int -> A
//│   fun isEmpty: () -> Bool
//│ }
//│ class C(e1: Exp, e2: Exp) extends Exp {
//│   fun derive: Int -> (A | C)
//│   fun isEmpty: () -> Bool
//│ }
//│ Bool
//│ res
//│     = false


:mono
val anyUnknown = false
class List(l: List | Nil, hasTail: Bool)  {}
class Nil(hasTail: Bool)  {}
fun gen() = 
  if anyUnknown then new List(gen(), true) else new Nil(false)
gen()
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), anyUnknown, None, [], Var(false)), NuTypeDef(class, List, (), Tup(l: App(Var(|), Tup(_: Var(List), _: Var(Nil))), hasTail: Var(Bool)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(hasTail: Var(Bool)), (), None, None, TypingUnit()), NuFunDef(None, gen, None, [], Lam(Tup(), Blk(...))), App(Var(gen), Tup()))
//│ val anyUnknown: false
//│ class List(l: List | Nil, hasTail: Bool)
//│ class Nil(hasTail: Bool)
//│ fun gen: () -> (List | Nil)
//│ List | Nil
//│ anyUnknown
//│            = false
//│ res
//│     = Nil {}



:mono
class Foo(x: Int){
  fun bar(y) = x+y
  fun boo(z) = bar(z)+x
}
(new Foo(1)).boo(2)
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, bar, None, [], Lam(Tup(_: Var(y)), App(Var(+), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, boo, None, [], Lam(Tup(_: Var(z)), App(Var(+), Tup(_: App(Var(bar), Tup(_: Var(z))), _: Var(x))))))), App(Sel(Bra(rcd = false, New(Some((TypeName(Foo),[1,])), TypingUnit())), boo), Tup(_: IntLit(2))))
//│ class Foo(x: Int) {
//│   fun bar: Int -> Int
//│   fun boo: Int -> Int
//│ }
//│ Int
//│ res
//│     = 4

:mono
class OneInt(a: Int){
  fun fac: () -> Int
  fun fac = () ->
    if(a > 0) then (new OneInt(a - 1)).fac() else 1 
}
(new OneInt(10)).fac()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, fac, None, [], PolyType(List(),Function(Tuple(List()),TypeName(Int)))), NuFunDef(None, fac, None, [], Lam(Tup(), Blk(...))))), App(Sel(Bra(rcd = false, New(Some((TypeName(OneInt),[10,])), TypingUnit())), fac), Tup()))
//│ class OneInt(a: Int) {
//│   fun fac: () -> Int
//│ }
//│ Int
//│ res
//│     = 1

//:mono
//:e // FIXME: Mutable Parameters
//trait AnyFoo {
//}
//class FooPlus(#a): AnyFoo {
//  fun bar(b) = a + b
//}
//class FooMinus(#a): AnyFoo {
//  fun bar(b) = a - b
//}
//fun f(x) = x.bar(42)
//f(new FooPlus(1))
//f(new FooMinus(2))

:mono
val any = -20
fun f(x) = 
  if x > any then 0
  else g(x - 1)
fun g(x) = 
  if x > any then g(x - 1)
  else f(x - 2)
g(1)
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), any, None, [], IntLit(-20)), NuFunDef(None, f, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, g, None, [], Lam(Tup(_: Var(x)), Blk(...))), App(Var(g), Tup(_: IntLit(1))))
//│ val any: -20
//│ fun f: Int -> 0
//│ fun g: Int -> 0
//│ 0
//│ any
//│     = -20
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:mono
class OneInt(a: Int){
  fun get = () -> a
}
class OneBool(b: Bool){
  fun get = () -> b
}
(if b then new OneInt(1) else new OneBool(true)).get()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, OneInt, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, get, None, [], Lam(Tup(), Var(a))))), NuTypeDef(class, OneBool, (), Tup(b: Var(Bool)), (), None, None, TypingUnit(NuFunDef(None, get, None, [], Lam(Tup(), Var(b))))), App(Sel(Bra(rcd = false, If(IfThen(Var(b), New(Some((TypeName(OneInt),[1,])), TypingUnit()), Some(New(Some((TypeName(OneBool),[true,])), TypingUnit())))), get), Tup()))
//│ class OneInt(a: Int) {
//│   fun get: () -> Int
//│ }
//│ class OneBool(b: Bool) {
//│   fun get: () -> Bool
//│ }
//│ Int | false | true
//│ res
//│     = true

:mono
class Bar(x: Int) {
  fun foo(x) = x
  fun FooMinus(y: Int) = x + y
  fun car = foo(2)
}
class Car {
  fun da(b: Bar) = b.foo(2)
}
fun baz(b: Bar) = b.foo(2)
let bar = Bar(42)
baz(bar)
(new Car()).da(Bar(1337))
bar.car
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Bar, (), Tup(x: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Var(x))), NuFunDef(None, FooMinus, None, [], Lam(Tup(y: Var(Int)), App(Var(+), Tup(_: Var(x), _: Var(y))))), NuFunDef(None, car, None, [], App(Var(foo), Tup(_: IntLit(2)))))), NuTypeDef(class, Car, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, da, None, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))))), NuFunDef(None, baz, None, [], Lam(Tup(b: Var(Bar)), App(Sel(Var(b), foo), Tup(_: IntLit(2))))), NuFunDef(Some(false), bar, None, [], App(Var(Bar), Tup(_: IntLit(42)))), App(Var(baz), Tup(_: Var(bar))), App(Sel(Bra(rcd = false, New(Some((TypeName(Car),[])), TypingUnit())), da), Tup(_: App(Var(Bar), Tup(_: IntLit(1337))))), Sel(Var(bar), car))
//│ class Bar(x: Int) {
//│   fun FooMinus: (y: Int) -> Int
//│   fun car: 2
//│   fun foo: forall 'a. 'a -> 'a
//│ }
//│ class Car {
//│   constructor()
//│   fun da: (b: Bar) -> 2
//│ }
//│ fun baz: (b: Bar) -> 2
//│ let bar: Bar
//│ 2
//│ bar
//│     = Bar {}
//│ res
//│     = 2
//│ res
//│     = 2
//│ res
//│     = 2

:mono
val c = 5
class Sup(a: Int){
  virtual fun foo = () -> a
}
class Sub(b: Int) extends Sup(b+b){
}
class Sub2(c: Int) extends Sub(c+c){
  fun foo = () -> a+c
}
(new Sub(10)).foo()
(new Sub2(c)).foo()
//│ Parsed:
//│ TypingUnit(NuFunDef(Some(false), c, None, [], IntLit(5)), NuTypeDef(class, Sup, (), Tup(a: Var(Int)), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), Var(a))))), NuTypeDef(class, Sub, (), Tup(b: Var(Int)), (App(Var(Sup), Tup(_: App(Var(+), Tup(_: Var(b), _: Var(b)))))), None, None, TypingUnit()), NuTypeDef(class, Sub2, (), Tup(c: Var(Int)), (App(Var(Sub), Tup(_: App(Var(+), Tup(_: Var(c), _: Var(c)))))), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(+), Tup(_: Var(a), _: Var(c))))))), App(Sel(Bra(rcd = false, New(Some((TypeName(Sub),[10,])), TypingUnit())), foo), Tup()), App(Sel(Bra(rcd = false, New(Some((TypeName(Sub2),[c,])), TypingUnit())), foo), Tup()))
//│ val c: 5
//│ class Sup(a: Int) {
//│   fun foo: () -> Int
//│ }
//│ class Sub(b: Int) extends Sup {
//│   fun foo: () -> Int
//│ }
//│ class Sub2(c: Int) extends Sub, Sup {
//│   fun foo: () -> Int
//│ }
//│ Int
//│ c
//│   = 5
//│ res
//│     = 20
//│ res
//│     = 47

:mono
class Foo(f: Int -> Int){
  fun foo = () -> f(1)
}
class F1() extends Foo(x => x+1){}
class F2() extends Foo(x => x+2){}
(new F1()).foo()
(new F2()).foo()
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Foo, (), Tup(f: App(Var(->), Tup(_: Var(Int), _: Var(Int)))), (), None, None, TypingUnit(NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(f), Tup(_: IntLit(1))))))), NuTypeDef(class, F1, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(1))))))), None, None, TypingUnit()), NuTypeDef(class, F2, (), Tup(), (App(Var(Foo), Tup(_: Lam(Tup(_: Var(x)), App(Var(+), Tup(_: Var(x), _: IntLit(2))))))), None, None, TypingUnit()), App(Sel(Bra(rcd = false, New(Some((TypeName(F1),[])), TypingUnit())), foo), Tup()), App(Sel(Bra(rcd = false, New(Some((TypeName(F2),[])), TypingUnit())), foo), Tup()))
//│ class Foo(f: Int -> Int) {
//│   fun foo: () -> Int
//│ }
//│ class F1() extends Foo {
//│   fun foo: () -> Int
//│ }
//│ class F2() extends Foo {
//│   fun foo: () -> Int
//│ }
//│ Int
//│ res
//│     = 2
//│ res
//│     = 3
