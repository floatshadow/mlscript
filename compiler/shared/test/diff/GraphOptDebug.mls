:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(if 10 > 0 then S(O) else O)
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|#if| |10| |>| |0| |#then| |S|(|O|)| |#else| |O|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(if (>(10,)(0,)) then S(O,) else O,); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: If(IfThen(App(App(Var(>), Tup(_: IntLit(10))), Tup(_: IntLit(0))), App(Var(S), Tup(_: Var(O))), Some(Var(O))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%4) = x%4
//│   in case x%0 of
//│     O => let x%1 = False()
//│       in jump j%0(x%1)
//│     S => let x%2 = x%0.s
//│       in let* (x%3) = even(x%2)
//│         in jump j%0(x%3)
//│ )
//│ Def(1, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%1(x%9) = x%9
//│   in case x%5 of
//│     O => let x%6 = True()
//│       in jump j%1(x%6)
//│     S => let x%7 = x%5.s
//│       in let* (x%8) = odd(x%7)
//│         in jump j%1(x%8)
//│ )
//│ Def(2, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = >(10,0)
//│   in let join j%2(x%14) = let* (x%15) = odd(x%14)
//│         in x%15
//│     in if x%10
//│       true => let x%11 = O()
//│         in let x%12 = S(x%11)
//│           in jump j%2(x%12)
//│       false => let x%13 = O()
//│         in jump j%2(x%13)
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in let x%12 = S(x%11)
//│         in jump j%2(x%12)
//│     false => let x%13 = O()
//│       in jump j%2(x%13)
//│ )
//│ Def(5, @join j%2, [x%14], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%15) = odd(x%14)
//│   in x%15
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in let x%12 = S(x%11)
//│         in jump j%2$C%0(x%12)
//│     false => let x%13 = O()
//│       in jump j%2$C%1(x%13)
//│ )
//│ Def(7, odd$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(False))], 1, 
//│ let x%1 = False()
//│   in x%1
//│ )
//│ Def(9, @join j%2$C%0, [x%14], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%19 = x%14.s
//│   in let* (x%15) = odd$D%1$S%0(x%19)
//│     in x%15
//│ )
//│ Def(10, @join j%2$C%1, [x%14], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(False))], 1, 
//│ let* (x%15) = odd$D%0()
//│   in x%15
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in jump j%2$C%0$S%0(x%11)
//│     false => let x%13 = O()
//│       in jump j%2$C%1(x%13)
//│ )
//│ Def(7, odd$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(False))], 1, 
//│ let x%1 = False()
//│   in x%1
//│ )
//│ Def(10, @join j%2$C%1, [x%14], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(False))], 1, 
//│ let* (x%15) = odd$D%0()
//│   in x%15
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(12, @join j%2$C%0$S%0, [x%14_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%15) = odd$D%1$S%0(x%14_s)
//│   in x%15
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in jump j%2$C%0$S%0$C%0(x%11)
//│     false => let x%13 = O()
//│       in jump j%2$C%1(x%13)
//│ )
//│ Def(7, odd$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(False))], 1, 
//│ let x%1 = False()
//│   in x%1
//│ )
//│ Def(10, @join j%2$C%1, [x%14], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(False))], 1, 
//│ let* (x%15) = odd$D%0()
//│   in x%15
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(16, @join j%2$C%0$S%0$C%0, [x%14_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%15) = odd$D%1$S%0(x%14_s)
//│   in x%15
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []) [] {
//│ }
//│ ClassInfo(1, False, []) [] {
//│ }
//│ ClassInfo(2, S, [s]) [] {
//│ }
//│ ClassInfo(3, O, []) [] {
//│ }
//│ }, {
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in jump j%2$C%0$S%0$C%0$C%0(x%11)
//│     false => let x%13 = O()
//│       in jump j%2$C%1(x%13)
//│ )
//│ Def(7, odd$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(False))], 1, 
//│ let x%1 = False()
//│   in x%1
//│ )
//│ Def(10, @join j%2$C%1, [x%14], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(False))], 1, 
//│ let* (x%15) = odd$D%0()
//│   in x%15
//│ )
//│ Def(18, even$D%2, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(True))], 1, 
//│ let x%6 = True()
//│   in x%6
//│ )
//│ Def(20, @join j%2$C%0$S%0$C%0$C%0, [x%14_s], [{EDirect}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(True))], 1, 
//│ let* (x%15) = odd$D%1$S%0$C%0(x%14_s)
//│   in x%15
//│ )
//│ Def(21, odd$D%1$S%0$C%0, [x%0_s], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(True))], 1, 
//│ let* (x%3) = even$D%2()
//│   in x%3
//│ )
//│ },
//│ let* (x%16) = foo()
//│   in x%16)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Fuel used: 5
