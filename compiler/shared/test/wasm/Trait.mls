:NewParser
:ParseOnly


:GraphOpt
trait C {
    fun GetConst() = 5 
}
class B(y) extends C {
    fun GetConst() = 10
    fun Get() = y
}
fun foo(t) =
    B.Get(t) + B.GetConst(t)
foo(B(1))
//│ |#trait| |C| |{|→|#fun| |GetConst|(||)| |#=| |5| |←|↵|}|↵|#class| |B|(|y|)| |#extends| |C| |{|→|#fun| |GetConst|(||)| |#=| |10|↵|#fun| |Get|(||)| |#=| |y|←|↵|}|↵|#fun| |foo|(|t|)| |#=|→|B|.Get|(|t|)| |+| |B|.GetConst|(|t|)|←|↵|foo|(|B|(|1|)|)|
//│ Parsed: {trait C {fun GetConst = () => 5}; class B(y,): C {fun GetConst = () => 10; fun Get = () => y}; fun foo = (t,) => {+((B).Get(t,),)((B).GetConst(t,),)}; foo(B(1,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(trait, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst, None, [], Lam(Tup(), IntLit(5))))), NuTypeDef(class, B, (), Tup(_: Var(y)), (Var(C)), None, None, TypingUnit(NuFunDef(None, GetConst, None, [], Lam(Tup(), IntLit(10))), NuFunDef(None, Get, None, [], Lam(Tup(), Var(y))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: App(Var(B), Tup(_: IntLit(1))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, C, []) [] {
//│ Def(0, GetConst, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 5
//│ )}
//│ ClassInfo(1, B, [y]) [] {
//│ Def(1, GetConst, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 10
//│ )
//│ Def(2, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = this.y
//│   in x%0
//│ )}
//│ }, {
//│ Def(3, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%1 = t%0.Get[B]()
//│   in let x%2 = t%0.GetConst[B]()
//│     in let x%3 = +(x%1,x%2)
//│       in x%3
//│ )
//│ },
//│ let x%4 = B(1)
//│   in let* (x%5) = foo(x%4)
//│     in x%5)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│   (type $_ZTYP_C@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C_GetConst (func (param i32) (result i32)))
//│   (table 2 funcref)
//│   (elem (i32.const 0)
//│     (;0;) $_ZC_GetConst
//│     (;1;) $_ZB_GetConst
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $B (i32.const 0) "\42")
//│   (data $C (i32.const 4) "\43")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $y (i32.const 12) "\79")
//│   (data $_ZIT_B (i32.const 16) "\01\00\00\00\00\00\00\00\01\00\00\00")
//│   (data $undefined (i32.const 28) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $_ZC_GetConst (param $this i32) (result i32)
//│ 
//│     i32.const 5
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 5
//│   )
//│   (export "_ZC_GetConst" (func $_ZC_GetConst))
//│   (func $_ZB_GetConst (param $this i32) (result i32)
//│ 
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│   )
//│   (export "_ZB_GetConst" (func $_ZB_GetConst))
//│   (func $_ZB_Get (param $this i32) (result i32)
//│     (local $x%0 i32)
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│   )
//│   (export "_ZB_Get" (func $_ZB_Get))
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%1 i32)
//│     (local $x%2 i32)
//│     (local $x%3 i32)
//│     local.get $t%0
//│     call $_ZB_Get
//│     ;; call method Get of object t%0
//│     local.set $x%1
//│     ;; bind variable x%1
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 0
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C_GetConst))
//│     local.set $x%2
//│     ;; bind variable x%2
//│     local.get $x%1
//│     local.get $x%2
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%3
//│     ;; bind variable x%3
//│     local.get $x%3
//│   )
//│   (export "foo" (func $foo))
//│   (func $main  (result i32)
//│     (local $x%4 i32)
//│     (local $x%5 i32)
//│     i32.const 20
//│     call $malloc
//│     local.set $x%4
//│     ;; allocate for x%4
//│     local.get $x%4
//│     i32.const 1
//│     i32.store
//│     local.get $x%4
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%4
//│     call $foo
//│     local.set $x%5
//│     local.get $x%5
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $_ZC_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC_show" (func $_ZC_show))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 12
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class B
//│       block $case_0
//│         ;; case class C
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZC_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 28
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZB_constructor (param $this i32) (param $y i32) 
//│ 
//│     local.get $this
//│     i32.const 16
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 11

:GraphOpt
trait C {
    fun GetConst() = 1
}
trait C1 {
    fun GetConst1() = 2
}
class B(y) extends C, C1 {
    fun GetConst() = 6
    fun GetConst1() = 9
    fun Get() = y
}
fun foo(t) =
    B.Get(t) + B.GetConst(t) + B.GetConst1(t)
foo(B(10))
//│ |#trait| |C| |{|→|#fun| |GetConst|(||)| |#=| |1|←|↵|}|↵|#trait| |C1| |{|→|#fun| |GetConst1|(||)| |#=| |2|←|↵|}|↵|#class| |B|(|y|)| |#extends| |C|,| |C1| |{|→|#fun| |GetConst|(||)| |#=| |6|↵|#fun| |GetConst1|(||)| |#=| |9|↵|#fun| |Get|(||)| |#=| |y|←|↵|}|↵|#fun| |foo|(|t|)| |#=|→|B|.Get|(|t|)| |+| |B|.GetConst|(|t|)| |+| |B|.GetConst1|(|t|)|←|↵|foo|(|B|(|10|)|)|
//│ Parsed: {trait C {fun GetConst = () => 1}; trait C1 {fun GetConst1 = () => 2}; class B(y,): C, C1 {fun GetConst = () => 6; fun GetConst1 = () => 9; fun Get = () => y}; fun foo = (t,) => {+(+((B).Get(t,),)((B).GetConst(t,),),)((B).GetConst1(t,),)}; foo(B(10,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(trait, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst, None, [], Lam(Tup(), IntLit(1))))), NuTypeDef(trait, C1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst1, None, [], Lam(Tup(), IntLit(2))))), NuTypeDef(class, B, (), Tup(_: Var(y)), (Var(C), Var(C1)), None, None, TypingUnit(NuFunDef(None, GetConst, None, [], Lam(Tup(), IntLit(6))), NuFunDef(None, GetConst1, None, [], Lam(Tup(), IntLit(9))), NuFunDef(None, Get, None, [], Lam(Tup(), Var(y))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: App(Var(B), Tup(_: IntLit(10))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, C, []) [] {
//│ Def(0, GetConst, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 1
//│ )}
//│ ClassInfo(1, C1, []) [] {
//│ Def(1, GetConst1, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 2
//│ )}
//│ ClassInfo(2, B, [y]) [] {
//│ Def(2, GetConst, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 6
//│ )
//│ Def(3, GetConst1, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 9
//│ )
//│ Def(4, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = this.y
//│   in x%0
//│ )}
//│ }, {
//│ Def(5, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%1 = t%0.Get[B]()
//│   in let x%2 = t%0.GetConst[B]()
//│     in let x%3 = +(x%1,x%2)
//│       in let x%4 = t%0.GetConst1[B]()
//│         in let x%5 = +(x%3,x%4)
//│           in x%5
//│ )
//│ },
//│ let x%6 = B(10)
//│   in let* (x%7) = foo(x%6)
//│     in x%7)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│   (type $_ZTYP_C@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_C1@C1_GetConst1 (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C1_GetConst1 (func (param i32) (result i32)))
//│   (table 4 funcref)
//│   (elem (i32.const 0)
//│     (;0;) $_ZC_GetConst
//│     (;1;) $_ZC1_GetConst1
//│     (;2;) $_ZB_GetConst
//│     (;3;) $_ZB_GetConst1
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $B (i32.const 0) "\42")
//│   (data $C (i32.const 4) "\43")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $y (i32.const 12) "\79")
//│   (data $_ZIT_B (i32.const 16) "\02\00\00\00\00\00\00\00\02\00\00\00\01\00\00\00\03\00\00\00")
//│   (data $C1 (i32.const 36) "\43\31")
//│   (data $undefined (i32.const 40) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $_ZC_GetConst (param $this i32) (result i32)
//│ 
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│   )
//│   (export "_ZC_GetConst" (func $_ZC_GetConst))
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%3 i32)
//│     (local $x%2 i32)
//│     (local $x%1 i32)
//│     (local $x%5 i32)
//│     (local $x%4 i32)
//│     local.get $t%0
//│     call $_ZB_Get
//│     ;; call method Get of object t%0
//│     local.set $x%1
//│     ;; bind variable x%1
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 0
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C_GetConst))
//│     local.set $x%2
//│     ;; bind variable x%2
//│     local.get $x%1
//│     local.get $x%2
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%3
//│     ;; bind variable x%3
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 1
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C1_GetConst1))
//│     local.set $x%4
//│     ;; bind variable x%4
//│     local.get $x%3
//│     local.get $x%4
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%5
//│     ;; bind variable x%5
//│     local.get $x%5
//│   )
//│   (export "foo" (func $foo))
//│   (func $_ZC1_GetConst1 (param $this i32) (result i32)
//│ 
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│   )
//│   (export "_ZC1_GetConst1" (func $_ZC1_GetConst1))
//│   (func $_ZB_GetConst (param $this i32) (result i32)
//│ 
//│     i32.const 6
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 6
//│   )
//│   (export "_ZB_GetConst" (func $_ZB_GetConst))
//│   (func $_ZB_GetConst1 (param $this i32) (result i32)
//│ 
//│     i32.const 9
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 9
//│   )
//│   (export "_ZB_GetConst1" (func $_ZB_GetConst1))
//│   (func $main  (result i32)
//│     (local $x%6 i32)
//│     (local $x%7 i32)
//│     i32.const 20
//│     call $malloc
//│     local.set $x%6
//│     ;; allocate for x%6
//│     local.get $x%6
//│     i32.const 2
//│     i32.store
//│     local.get $x%6
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%6
//│     call $foo
//│     local.set $x%7
//│     local.get $x%7
//│   )
//│   (export "main" (func $main))
//│   (func $_ZB_Get (param $this i32) (result i32)
//│     (local $x%0 i32)
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│   )
//│   (export "_ZB_Get" (func $_ZB_Get))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $_ZC_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC_show" (func $_ZC_show))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 12
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_2
//│       ;; case class B
//│       block $case_1
//│         ;; case class C1
//│         block $case_0
//│           ;; case class C
//│           block $match_id
//│             local.get $this
//│             i32.load
//│             br_table 0 1 2 3
//│           end
//│           local.get $this
//│           call $_ZC_show
//│           return
//│         end
//│         local.get $this
//│         call $_ZC1_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 40
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZC1_show (param $this i32) 
//│ 
//│     i32.const 36
//│     i32.const 2
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC1_show" (func $_ZC1_show))
//│   (func $_ZB_constructor (param $this i32) (param $y i32) 
//│ 
//│     local.get $this
//│     i32.const 16
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 25


:GraphOpt
trait C {
    fun GetConst() = 1
}
trait C1 {
    fun GetConst1() = 2
}
trait C2 {
    fun GetConst2() = 3
}
class A extends C, C1 {
    fun GetConst1() = 7
}
class B(y) extends A, C2 {
    fun GetConst2() = 14
    fun Get() = y
}
fun foo(t) =
    B.GetConst(t) + B.GetConst1(t) + B.GetConst2(t)
foo(B(10))
//│ |#trait| |C| |{|→|#fun| |GetConst|(||)| |#=| |1|←|↵|}|↵|#trait| |C1| |{|→|#fun| |GetConst1|(||)| |#=| |2|←|↵|}|↵|#trait| |C2| |{|→|#fun| |GetConst2|(||)| |#=| |3|←|↵|}|↵|#class| |A| |#extends| |C|,| |C1| |{|→|#fun| |GetConst1|(||)| |#=| |7|←|↵|}|↵|#class| |B|(|y|)| |#extends| |A|,| |C2| |{|→|#fun| |GetConst2|(||)| |#=| |14|↵|#fun| |Get|(||)| |#=| |y|←|↵|}|↵|#fun| |foo|(|t|)| |#=|→|B|.GetConst|(|t|)| |+| |B|.GetConst1|(|t|)| |+| |B|.GetConst2|(|t|)|←|↵|foo|(|B|(|10|)|)|
//│ Parsed: {trait C {fun GetConst = () => 1}; trait C1 {fun GetConst1 = () => 2}; trait C2 {fun GetConst2 = () => 3}; class A: C, C1 {fun GetConst1 = () => 7}; class B(y,): A, C2 {fun GetConst2 = () => 14; fun Get = () => y}; fun foo = (t,) => {+(+((B).GetConst(t,),)((B).GetConst1(t,),),)((B).GetConst2(t,),)}; foo(B(10,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(trait, C, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst, None, [], Lam(Tup(), IntLit(1))))), NuTypeDef(trait, C1, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst1, None, [], Lam(Tup(), IntLit(2))))), NuTypeDef(trait, C2, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, GetConst2, None, [], Lam(Tup(), IntLit(3))))), NuTypeDef(class, A, (), Tup(), (Var(C), Var(C1)), None, None, TypingUnit(NuFunDef(None, GetConst1, None, [], Lam(Tup(), IntLit(7))))), NuTypeDef(class, B, (), Tup(_: Var(y)), (Var(A), Var(C2)), None, None, TypingUnit(NuFunDef(None, GetConst2, None, [], Lam(Tup(), IntLit(14))), NuFunDef(None, Get, None, [], Lam(Tup(), Var(y))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: App(Var(B), Tup(_: IntLit(10))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, C, []) [] {
//│ Def(0, GetConst, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 1
//│ )}
//│ ClassInfo(1, C1, []) [] {
//│ Def(1, GetConst1, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 2
//│ )}
//│ ClassInfo(2, C2, []) [] {
//│ Def(2, GetConst2, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 3
//│ )}
//│ ClassInfo(3, A, []) [] {
//│ Def(3, GetConst1, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 7
//│ )}
//│ ClassInfo(4, B, [y]) [] {
//│ Def(4, GetConst2, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 14
//│ )
//│ Def(5, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = this.y
//│   in x%0
//│ )}
//│ }, {
//│ Def(6, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%1 = t%0.GetConst[B]()
//│   in let x%2 = t%0.GetConst1[B]()
//│     in let x%3 = +(x%1,x%2)
//│       in let x%4 = t%0.GetConst2[B]()
//│         in let x%5 = +(x%3,x%4)
//│           in x%5
//│ )
//│ },
//│ let x%6 = B(10)
//│   in let* (x%7) = foo(x%6)
//│     in x%7)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│   (type $_ZTYP_C2@C2_GetConst2 (func (param i32) (result i32)))
//│   (type $_ZTYP_C@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C2_GetConst2 (func (param i32) (result i32)))
//│   (type $_ZTYP_C1@C1_GetConst1 (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C1_GetConst1 (func (param i32) (result i32)))
//│   (type $_ZTYP_B@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_A@C_GetConst (func (param i32) (result i32)))
//│   (type $_ZTYP_A@C1_GetConst1 (func (param i32) (result i32)))
//│   (table 8 funcref)
//│   (elem (i32.const 0)
//│     (;0;) $_ZC_GetConst
//│     (;1;) $_ZC1_GetConst1
//│     (;2;) $_ZC2_GetConst2
//│     (;3;) $_ZC_GetConst
//│     (;4;) $_ZA_GetConst1
//│     (;5;) $_ZC_GetConst
//│     (;6;) $_ZA_GetConst1
//│     (;7;) $_ZB_GetConst2
//│   )
//│   (global (mut i32) i32.const 128)
//│   (data $A (i32.const 0) "\41")
//│   (data $B (i32.const 4) "\42")
//│   (data $C (i32.const 8) "\43")
//│   (data $free_list (i32.const 12) "\00\00\00\00")
//│   (data $y (i32.const 16) "\79")
//│   (data $_ZIT_B (i32.const 20) "\03\00\00\00\00\00\00\00\05\00\00\00\01\00\00\00\06\00\00\00\02\00\00\00\07\00\00\00")
//│   (data $_ZIT_A (i32.const 48) "\02\00\00\00\00\00\00\00\03\00\00\00\01\00\00\00\04\00\00\00")
//│   (data $C1 (i32.const 68) "\43\31")
//│   (data $undefined (i32.const 72) "\75\6e\64\65\66\69\6e\65\64")
//│   (data $C2 (i32.const 84) "\43\32")
//│   (func $_ZC_GetConst (param $this i32) (result i32)
//│ 
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│   )
//│   (export "_ZC_GetConst" (func $_ZC_GetConst))
//│   (func $_ZB_Get (param $this i32) (result i32)
//│     (local $x%0 i32)
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│   )
//│   (export "_ZB_Get" (func $_ZB_Get))
//│   (func $_ZC1_GetConst1 (param $this i32) (result i32)
//│ 
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│   )
//│   (export "_ZC1_GetConst1" (func $_ZC1_GetConst1))
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%3 i32)
//│     (local $x%2 i32)
//│     (local $x%1 i32)
//│     (local $x%5 i32)
//│     (local $x%4 i32)
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 0
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C_GetConst))
//│     local.set $x%1
//│     ;; bind variable x%1
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 1
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C1_GetConst1))
//│     local.set $x%2
//│     ;; bind variable x%2
//│     local.get $x%1
//│     local.get $x%2
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%3
//│     ;; bind variable x%3
//│     local.get $t%0
//│     local.get $t%0
//│     i32.const 2
//│     call $__mlscript_invokeinterface
//│     i32.const 0
//│     i32.add
//│     (call_indirect (type $_ZTYP_B@C2_GetConst2))
//│     local.set $x%4
//│     ;; bind variable x%4
//│     local.get $x%3
//│     local.get $x%4
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%5
//│     ;; bind variable x%5
//│     local.get $x%5
//│   )
//│   (export "foo" (func $foo))
//│   (func $_ZC2_GetConst2 (param $this i32) (result i32)
//│ 
//│     i32.const 3
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 3
//│   )
//│   (export "_ZC2_GetConst2" (func $_ZC2_GetConst2))
//│   (func $_ZA_GetConst1 (param $this i32) (result i32)
//│ 
//│     i32.const 7
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 7
//│   )
//│   (export "_ZA_GetConst1" (func $_ZA_GetConst1))
//│   (func $main  (result i32)
//│     (local $x%6 i32)
//│     (local $x%7 i32)
//│     i32.const 20
//│     call $malloc
//│     local.set $x%6
//│     ;; allocate for x%6
//│     local.get $x%6
//│     i32.const 4
//│     i32.store
//│     local.get $x%6
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%6
//│     call $foo
//│     local.set $x%7
//│     local.get $x%7
//│   )
//│   (export "main" (func $main))
//│   (func $_ZB_GetConst2 (param $this i32) (result i32)
//│ 
//│     i32.const 14
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 14
//│   )
//│   (export "_ZB_GetConst2" (func $_ZB_GetConst2))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=12
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=12
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $_ZC2_show (param $this i32) 
//│ 
//│     i32.const 84
//│     i32.const 2
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC2_show" (func $_ZC2_show))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 16
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $_ZA_constructor (param $this i32) 
//│ 
//│     local.get $this
//│     i32.const 48
//│     i32.store offset=8
//│     ;; set itable
//│   )
//│   (export "_ZA_constructor" (func $_ZA_constructor))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_4
//│       ;; case class B
//│       block $case_3
//│         ;; case class A
//│         block $case_2
//│           ;; case class C2
//│           block $case_1
//│             ;; case class C1
//│             block $case_0
//│               ;; case class C
//│               block $match_id
//│                 local.get $this
//│                 i32.load
//│                 br_table 0 1 2 3 4 5
//│               end
//│               local.get $this
//│               call $_ZC_show
//│               return
//│             end
//│             local.get $this
//│             call $_ZC1_show
//│             return
//│           end
//│           local.get $this
//│           call $_ZC2_show
//│           return
//│         end
//│         local.get $this
//│         call $_ZA_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 72
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZA_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZA_show" (func $_ZA_show))
//│   (func $_ZC1_show (param $this i32) 
//│ 
//│     i32.const 68
//│     i32.const 2
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC1_show" (func $_ZC1_show))
//│   (func $_ZB_constructor (param $this i32) (param $y i32) 
//│ 
//│     local.get $this
//│     i32.const 0
//│     i32.add
//│     call $_ZA_constructor
//│     ;; ctor parent A
//│     local.get $this
//│     i32.const 20
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│   (func $_ZC_show (param $this i32) 
//│ 
//│     i32.const 8
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZC_show" (func $_ZC_show))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=12
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=12
//│   )
//│   (export "free" (func $free))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 22
