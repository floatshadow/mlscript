:NewParser
:ParseOnly

:GraphOpt
class A {
    virtual fun Get() = 0
    virtual fun Get2() = 1
}
class B extends A {
    virtual fun Get() = 2
    virtual fun Get2() = 3
}
class C extends A {
    virtual fun Get() = 4
    virtual fun Get3() = 7
}
fun foo(t) =
    A.Get(t) + A.Get2(t)
foo(C)
//│ |#class| |A| |{|→|#virtual| |#fun| |Get|(||)| |#=| |0|↵|#virtual| |#fun| |Get2|(||)| |#=| |1|←|↵|}|↵|#class| |B| |#extends| |A| |{|→|#virtual| |#fun| |Get|(||)| |#=| |2|↵|#virtual| |#fun| |Get2|(||)| |#=| |3|←|↵|}|↵|#class| |C| |#extends| |A| |{|→|#virtual| |#fun| |Get|(||)| |#=| |4|↵|#virtual| |#fun| |Get3|(||)| |#=| |7|←|↵|}|↵|#fun| |foo|(|t|)| |#=|→|A|.Get|(|t|)| |+| |A|.Get2|(|t|)|←|↵|foo|(|C|)|
//│ Parsed: {class A {fun Get = () => 0; fun Get2 = () => 1}; class B: A {fun Get = () => 2; fun Get2 = () => 3}; class C: A {fun Get = () => 4; fun Get3 = () => 7}; fun foo = (t,) => {+((A).Get(t,),)((A).Get2(t,),)}; foo(C,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(None, Get, None, [], Lam(Tup(), IntLit(0))), NuFunDef(None, Get2, None, [], Lam(Tup(), IntLit(1))))), NuTypeDef(class, B, (), Tup(), (Var(A)), None, None, TypingUnit(NuFunDef(None, Get, None, [], Lam(Tup(), IntLit(2))), NuFunDef(None, Get2, None, [], Lam(Tup(), IntLit(3))))), NuTypeDef(class, C, (), Tup(), (Var(A)), None, None, TypingUnit(NuFunDef(None, Get, None, [], Lam(Tup(), IntLit(4))), NuFunDef(None, Get3, None, [], Lam(Tup(), IntLit(7))))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: Var(C))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, []) [] {
//│ Def(0, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 0
//│ )
//│ Def(1, Get2, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 1
//│ )}
//│ ClassInfo(1, B, []) [] {
//│ Def(2, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 2
//│ )
//│ Def(3, Get2, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 3
//│ )}
//│ ClassInfo(2, C, []) [] {
//│ Def(4, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 4
//│ )
//│ Def(5, Get3, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ 7
//│ )}
//│ }, {
//│ Def(6, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = t%0.Get[A]()
//│   in let x%1 = t%0.Get2[A]()
//│     in let x%2 = +(x%0,x%1)
//│       in x%2
//│ )
//│ },
//│ let x%3 = C()
//│   in let* (x%4) = foo(x%3)
//│     in x%4)
//│ 
//│ WasmBackend:
//│ Unknown error:
//│ scala.collection.immutable.Map$EmptyMap$.apply(Map.scala:225)
//│ scala.collection.immutable.Map$EmptyMap$.apply(Map.scala:221)
//│ mlscript.compiler.wasm.WasmBackend.generateCtor(WasmBackend.scala:590)
//│ mlscript.compiler.wasm.WasmBackend.preprocess$$anonfun$5(WasmBackend.scala:204)
//│ scala.collection.immutable.List.foreach(List.scala:333)
//│ mlscript.compiler.wasm.WasmBackend.preprocess(WasmBackend.scala:205)
//│ mlscript.compiler.wasm.WasmBackend.translate(WasmBackend.scala:516)
//│ mlscript.compiler.WasmDiffTestCompiler.postProcess(WasmTest.scala:32)
//│ mlscript.DiffTests.rec$1(DiffTests.scala:438)
//│ mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:1067)
//│ org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ org.scalatest.Transformer.apply(Transformer.scala:22)
//│ org.scalatest.Transformer.apply(Transformer.scala:20)
//│ org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)
//│ org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
//│ org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
//│ mlscript.DiffTests.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(DiffTests.scala:47)
//│ org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
//│ org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
//│ org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:282)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
//│ mlscript.DiffTests.withFixture(DiffTests.scala:47)
//│ org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)
//│ org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)
//│ mlscript.DiffTests.org$scalatest$OneInstancePerTest$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTest(OneInstancePerTest.scala:131)
//│ org.scalatest.OneInstancePerTest.runTest$(OneInstancePerTest.scala:123)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTest(ParallelTestExecution.scala:164)
//│ org.scalatest.ParallelTestExecution.runTest$(ParallelTestExecution.scala:148)
//│ mlscript.DiffTests.runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTests(OneInstancePerTest.scala:181)
//│ org.scalatest.OneInstancePerTest.runTests$(OneInstancePerTest.scala:172)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTests(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTests(ParallelTestExecution.scala:97)
//│ org.scalatest.ParallelTestExecution.runTests$(ParallelTestExecution.scala:79)
//│ mlscript.DiffTests.runTests(DiffTests.scala:47)
//│ org.scalatest.Suite.run(Suite.scala:1114)
//│ org.scalatest.Suite.run$(Suite.scala:1096)
//│ org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)
//│ org.scalatest.SuperEngine.runImpl(Engine.scala:535)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$run(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.run(ParallelTestExecution.scala:261)
//│ org.scalatest.ParallelTestExecution.run$(ParallelTestExecution.scala:258)
//│ mlscript.DiffTests.run(DiffTests.scala:47)
//│ org.scalatest.tools.DistributedTestRunnerSuite.run(DistributedTestRunnerSuite.scala:22)
//│ org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
//│ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
//│ java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//│ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
//│ java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
//│ java.base/java.lang.Thread.run(Thread.java:834)
