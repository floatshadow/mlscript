:NewParser
:ParseOnly

:GraphOpt
class A(x)
class B(y) extends A(y + 1)
B(10)
//│ |#class| |A|(|x|)|↵|#class| |B|(|y|)| |#extends| |A|(|y| |+| |1|)|↵|B|(|10|)|
//│ Parsed: {class A(x,) {}; class B(y,): A(+(y,)(1,),) {}; B(10,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(y)), (App(Var(A), Tup(_: App(App(Var(+), Tup(_: Var(y))), Tup(_: IntLit(1)))))), None, None, TypingUnit()), App(Var(B), Tup(_: IntLit(10))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x]) [] {
//│ }
//│ ClassInfo(1, B, [y]) [] {
//│ }
//│ }, {
//│ 
//│ },
//│ let x%1 = B(10)
//│   in x%1)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $A (i32.const 0) "\41")
//│   (data $B (i32.const 4) "\42")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $x (i32.const 12) "\78")
//│   (data $y (i32.const 16) "\79")
//│   (data $_ZIT_B (i32.const 20) "\00\00\00\00")
//│   (data $_ZIT_A (i32.const 24) "\00\00\00\00")
//│   (data $undefined (i32.const 28) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $main  (result i32)
//│     (local $x%1 i32)
//│     i32.const 24
//│     call $malloc
//│     local.set $x%1
//│     ;; allocate for x%1
//│     local.get $x%1
//│     i32.const 1
//│     i32.store
//│     local.get $x%1
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%1
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 16
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=20
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $_ZA_constructor (param $this i32) (param $x i32) 
//│ 
//│     local.get $this
//│     i32.const 24
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $x
//│     i32.store
//│     ;; set param x
//│   )
//│   (export "_ZA_constructor" (func $_ZA_constructor))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class B
//│       block $case_0
//│         ;; case class A
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZA_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 28
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZA_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 12
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZA_show" (func $_ZA_show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZB_constructor (param $this i32) (param $y i32) 
//│     (local $x%0 i32)
//│     local.get $this
//│     i32.const 0
//│     i32.add
//│     local.get $y
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│     call $_ZA_constructor
//│     ;; ctor parent A
//│     local.get $this
//│     i32.const 20
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ B(y: 10, )

:GraphOpt
class A(x) {
    let field = 1
    fun add(value) = this.x + value
    fun Get = A.field(this)
}
class B(y, z) extends A(y + 1)
fun foo(t) =
    B.x(t)
foo(B(1, 2))
//│ |#class| |A|(|x|)| |{|→|#let| |field| |#=| |1|↵|#fun| |add|(|value|)| |#=| |this|.x| |+| |value|↵|#fun| |Get| |#=| |A|.field|(|this|)|←|↵|}|↵|#class| |B|(|y|,| |z|)| |#extends| |A|(|y| |+| |1|)|↵|#fun| |foo|(|t|)| |#=|→|B|.x|(|t|)|←|↵|foo|(|B|(|1|,| |2|)|)|
//│ Parsed: {class A(x,) {let field = 1; fun add = (value,) => +((this).x,)(value,); fun Get = (A).field(this,)}; class B(y, z,): A(+(y,)(1,),) {}; fun foo = (t,) => {(B).x(t,)}; foo(B(1, 2,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x)), (), None, None, TypingUnit(NuFunDef(Some(false), field, None, [], IntLit(1)), NuFunDef(None, add, None, [], Lam(Tup(_: Var(value)), App(App(Var(+), Tup(_: Sel(Var(this), x))), Tup(_: Var(value))))), NuFunDef(None, Get, None, [], App(Sel(Var(A), field), Tup(_: Var(this)))))), NuTypeDef(class, B, (), Tup(_: Var(y), _: Var(z)), (App(Var(A), Tup(_: App(App(Var(+), Tup(_: Var(y))), Tup(_: IntLit(1)))))), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: App(Var(B), Tup(_: IntLit(1), _: IntLit(2))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x]) [field] {
//│ Def(0, add, [value%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = this.x
//│   in let x%1 = +(x%0,value%0)
//│     in x%1
//│ )
//│ Def(1, Get, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%2 = this.field[A]()
//│   in x%2
//│ )}
//│ ClassInfo(1, B, [y,z]) [] {
//│ }
//│ }, {
//│ Def(2, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = t%0.x[B]()
//│   in x%4
//│ )
//│ },
//│ let x%5 = B(1,2)
//│   in let* (x%6) = foo(x%5)
//│     in x%6)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $A (i32.const 0) "\41")
//│   (data $B (i32.const 4) "\42")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $x (i32.const 12) "\78")
//│   (data $y (i32.const 16) "\79")
//│   (data $_ZIT_B (i32.const 20) "\00\00\00\00")
//│   (data $z (i32.const 24) "\7a")
//│   (data $_ZIT_A (i32.const 28) "\00\00\00\00")
//│   (data $undefined (i32.const 32) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%4 i32)
//│     local.get $t%0
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     ;; select field x of object t%0
//│     local.set $x%4
//│     ;; bind variable x%4
//│     local.get $x%4
//│   )
//│   (export "foo" (func $foo))
//│   (func $_ZA_add (param $this i32) (param $value%0 i32) (result i32)
//│     (local $x%0 i32)
//│     (local $x%1 i32)
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│     local.get $value%0
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%1
//│     ;; bind variable x%1
//│     local.get $x%1
//│   )
//│   (export "_ZA_add" (func $_ZA_add))
//│   (func $_ZA_Get (param $this i32) (result i32)
//│     (local $x%2 i32)
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     i32.load
//│     ;; select field field of object this
//│     local.set $x%2
//│     ;; bind variable x%2
//│     local.get $x%2
//│   )
//│   (export "_ZA_Get" (func $_ZA_Get))
//│   (func $main  (result i32)
//│     (local $x%5 i32)
//│     (local $x%6 i32)
//│     i32.const 32
//│     call $malloc
//│     local.set $x%5
//│     ;; allocate for x%5
//│     local.get $x%5
//│     i32.const 1
//│     i32.store
//│     local.get $x%5
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%5
//│     call $foo
//│     local.set $x%6
//│     local.get $x%6
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 16
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=24
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 24
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=28
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $_ZA_constructor (param $this i32) (param $x i32) 
//│ 
//│     local.get $this
//│     i32.const 28
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $x
//│     i32.store
//│     ;; set param x
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.store
//│     ;; set field field
//│   )
//│   (export "_ZA_constructor" (func $_ZA_constructor))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class B
//│       block $case_0
//│         ;; case class A
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZA_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 32
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZA_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 12
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZA_show" (func $_ZA_show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZB_constructor (param $this i32) (param $y i32) (param $z i32) 
//│     (local $x%3 i32)
//│     local.get $this
//│     i32.const 0
//│     i32.add
//│     local.get $y
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%3
//│     ;; bind variable x%3
//│     local.get $x%3
//│     call $_ZA_constructor
//│     ;; ctor parent A
//│     local.get $this
//│     i32.const 20
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 24
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│     local.get $this
//│     i32.const 28
//│     i32.add
//│     local.get $z
//│     i32.store
//│     ;; set param z
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 2


:GraphOpt
class A { 
    val x = 1
    val y = x + 1
    fun add(value) = y + value
}
class B extends A { 
    val z = 100
}
fun foo(t) =
    B.add(t, 10)
foo(B)
//│ |#class| |A| |{| |→|#val| |x| |#=| |1|↵|#val| |y| |#=| |x| |+| |1|↵|#fun| |add|(|value|)| |#=| |y| |+| |value|←|↵|}|↵|#class| |B| |#extends| |A| |{| |→|#val| |z| |#=| |100|←|↵|}|↵|#fun| |foo|(|t|)| |#=|→|B|.add|(|t|,| |10|)|←|↵|foo|(|B|)|
//│ Parsed: {class A {let x = 1; let y = +(x,)(1,); fun add = (value,) => +(y,)(value,)}; class B: A {let z = 100}; fun foo = (t,) => {(B).add(t, 10,)}; foo(B,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit(NuFunDef(Some(false), x, None, [], IntLit(1)), NuFunDef(Some(false), y, None, [], App(App(Var(+), Tup(_: Var(x))), Tup(_: IntLit(1)))), NuFunDef(None, add, None, [], Lam(Tup(_: Var(value)), App(App(Var(+), Tup(_: Var(y))), Tup(_: Var(value))))))), NuTypeDef(class, B, (), Tup(), (Var(A)), None, None, TypingUnit(NuFunDef(Some(false), z, None, [], IntLit(100)))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(foo), Tup(_: Var(B))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, []) [x,y] {
//│ Def(0, add, [value%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%2 = this.y
//│   in let x%3 = +(x%2,value%0)
//│     in x%3
//│ )}
//│ ClassInfo(1, B, []) [z] {
//│ }
//│ }, {
//│ Def(1, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = t%0.add[B](10)
//│   in x%4
//│ )
//│ },
//│ let x%5 = B()
//│   in let* (x%6) = foo(x%5)
//│     in x%6)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $A (i32.const 0) "\41")
//│   (data $B (i32.const 4) "\42")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $_ZIT_B (i32.const 12) "\00\00\00\00")
//│   (data $_ZIT_A (i32.const 16) "\00\00\00\00")
//│   (data $undefined (i32.const 20) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%4 i32)
//│     local.get $t%0
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│     call $_ZA_add
//│     ;; call method add of object t%0
//│     local.set $x%4
//│     ;; bind variable x%4
//│     local.get $x%4
//│   )
//│   (export "foo" (func $foo))
//│   (func $_ZA_add (param $this i32) (param $value%0 i32) (result i32)
//│     (local $x%2 i32)
//│     (local $x%3 i32)
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     i32.load
//│     local.set $x%2
//│     ;; bind variable x%2
//│     local.get $x%2
//│     local.get $value%0
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%3
//│     ;; bind variable x%3
//│     local.get $x%3
//│   )
//│   (export "_ZA_add" (func $_ZA_add))
//│   (func $main  (result i32)
//│     (local $x%5 i32)
//│     (local $x%6 i32)
//│     i32.const 28
//│     call $malloc
//│     local.set $x%5
//│     ;; allocate for x%5
//│     local.get $x%5
//│     i32.const 1
//│     i32.store
//│     local.get $x%5
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%5
//│     call $foo
//│     local.set $x%6
//│     local.get $x%6
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $_ZA_constructor (param $this i32) 
//│     (local $x%0 i32)
//│     (local $x%1 i32)
//│     local.get $this
//│     i32.const 16
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.store
//│     ;; set field x
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     i32.load
//│     local.set $x%0
//│     ;; bind variable x%0
//│     local.get $x%0
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%1
//│     ;; bind variable x%1
//│     local.get $x%1
//│     i32.store
//│     ;; set field y
//│   )
//│   (export "_ZA_constructor" (func $_ZA_constructor))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class B
//│       block $case_0
//│         ;; case class A
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZA_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 20
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZA_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZA_show" (func $_ZA_show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZB_constructor (param $this i32) 
//│ 
//│     local.get $this
//│     i32.const 0
//│     i32.add
//│     call $_ZA_constructor
//│     ;; ctor parent A
//│     local.get $this
//│     i32.const 12
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 24
//│     i32.add
//│     i32.const 100
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 100
//│     i32.store
//│     ;; set field z
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 12
