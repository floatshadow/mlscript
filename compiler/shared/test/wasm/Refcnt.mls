:NewParser
:ParseOnly


:GraphOpt
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, A, (), Tup(_: Var(x), _: Var(y), _: Var(z)), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(m), _: Var(n)), (), None, None, TypingUnit()), NuFunDef(None, complex_foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(), Blk(...))), App(Var(bar), Tup()))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x,y,z]) [] {
//│ }
//│ ClassInfo(1, B, [m,n]) [] {
//│ }
//│ }, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%8) = let x%9 = B(1,2)
//│       in let join j%1(x%15) = let x%16 = +(x%8,x%15)
//│             in x%16
//│         in case x%9 of
//│           A => let x%10 = x%9.z
//│             in let x%11 = x%9.y
//│               in let x%12 = x%9.x
//│                 in jump j%1(3)
//│           B => let x%13 = x%9.n
//│             in let x%14 = x%9.m
//│               in jump j%1(4)
//│   in case t%0 of
//│     A => let x%0 = t%0.z
//│       in let x%1 = t%0.y
//│         in let x%2 = t%0.x
//│           in let x%3 = *(x%1,x%0)
//│             in let x%4 = +(x%2,x%3)
//│               in jump j%0(x%4)
//│     B => let x%5 = t%0.n
//│       in let x%6 = t%0.m
//│         in let x%7 = -(x%6,x%5)
//│           in jump j%0(x%7)
//│ )
//│ Def(1, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%17 = A(6,7,8)
//│   in let* (x%18) = complex_foo(x%17)
//│     in let x%19 = B(9,10)
//│       in let* (x%20) = complex_foo(x%19)
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar()
//│   in x%21)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $A (i32.const 0) "\41")
//│   (data $B (i32.const 4) "\42")
//│   (data $free_list (i32.const 8) "\00\00\00\00")
//│   (data $x (i32.const 12) "\78")
//│   (data $y (i32.const 16) "\79")
//│   (data $_ZIT_B (i32.const 20) "\00\00\00\00")
//│   (data $z (i32.const 24) "\7a")
//│   (data $_ZIT_A (i32.const 28) "\00\00\00\00")
//│   (data $m (i32.const 32) "\6d")
//│   (data $n (i32.const 36) "\6e")
//│   (data $undefined (i32.const 40) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $complex_foo (param $t%0 i32) (result i32)
//│     (local $x%6 i32)
//│     (local $x%9 i32)
//│     (local $x%7 i32)
//│     (local $x%15 i32)
//│     (local $x%2 i32)
//│     (local $x%0 i32)
//│     (local $x%8 i32)
//│     (local $x%14 i32)
//│     (local $x%11 i32)
//│     (local $x%12 i32)
//│     (local $x%3 i32)
//│     (local $x%10 i32)
//│     (local $x%1 i32)
//│     (local $x%16 i32)
//│     (local $x%5 i32)
//│     (local $x%4 i32)
//│     (local $x%13 i32)
//│     block $match_t%0_1
//│       ;; nested blocks: 0
//│       block $match_t%0_0
//│         ;; nested blocks: 1
//│         block $case_t%0
//│           local.get $t%0
//│           i32.load
//│           i32.const 0
//│           i32.sub
//│           br_table 0 1
//│           ;; case br table
//│         end
//│         local.get $t%0
//│         i32.const 24
//│         i32.add
//│         i32.load
//│         local.set $x%0
//│         ;; bind variable x%0
//│         local.get $t%0
//│         i32.const 20
//│         i32.add
//│         i32.load
//│         local.set $x%1
//│         ;; bind variable x%1
//│         local.get $t%0
//│         i32.const 16
//│         i32.add
//│         i32.load
//│         local.set $x%2
//│         ;; bind variable x%2
//│         local.get $x%1
//│         i32.const 1
//│         i32.shr_s
//│         local.get $x%0
//│         i32.const -1
//│         i32.add
//│         i32.const 1
//│         i32.add
//│         local.set $x%3
//│         ;; bind variable x%3
//│         local.get $x%2
//│         local.get $x%3
//│         i32.add
//│         i32.const -1
//│         i32.add
//│         local.set $x%4
//│         ;; bind variable x%4
//│         local.get $x%4
//│         local.set $x%8
//│         ;; set x%8
//│         br 1
//│       end
//│       ;; end of match_t%0_0
//│       local.get $t%0
//│       i32.const 20
//│       i32.add
//│       i32.load
//│       local.set $x%5
//│       ;; bind variable x%5
//│       local.get $t%0
//│       i32.const 16
//│       i32.add
//│       i32.load
//│       local.set $x%6
//│       ;; bind variable x%6
//│       local.get $x%6
//│       local.get $x%5
//│       i32.sub
//│       i32.const 1
//│       i32.add
//│       local.set $x%7
//│       ;; bind variable x%7
//│       local.get $x%7
//│       local.set $x%8
//│       ;; set x%8
//│       br 0
//│     end
//│     ;; end of match_t%0_1
//│     ;; join point j%0(x%8)
//│     i32.const 24
//│     call $malloc
//│     local.set $x%9
//│     ;; allocate for x%9
//│     local.get $x%9
//│     i32.const 1
//│     i32.store
//│     local.get $x%9
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     block $match_x%9_1
//│       ;; nested blocks: 0
//│       block $match_x%9_0
//│         ;; nested blocks: 1
//│         block $case_x%9
//│           local.get $x%9
//│           i32.load
//│           i32.const 0
//│           i32.sub
//│           br_table 0 1
//│           ;; case br table
//│         end
//│         local.get $x%9
//│         i32.const 24
//│         i32.add
//│         i32.load
//│         local.set $x%10
//│         ;; bind variable x%10
//│         local.get $x%9
//│         i32.const 20
//│         i32.add
//│         i32.load
//│         local.set $x%11
//│         ;; bind variable x%11
//│         local.get $x%9
//│         i32.const 16
//│         i32.add
//│         i32.load
//│         local.set $x%12
//│         ;; bind variable x%12
//│         i32.const 3
//│         i32.const 1
//│         i32.shl
//│         i32.const 1
//│         i32.add
//│         ;; imm 3
//│         local.set $x%15
//│         ;; set x%15
//│         br 1
//│       end
//│       ;; end of match_x%9_0
//│       local.get $x%9
//│       i32.const 20
//│       i32.add
//│       i32.load
//│       local.set $x%13
//│       ;; bind variable x%13
//│       local.get $x%9
//│       i32.const 16
//│       i32.add
//│       i32.load
//│       local.set $x%14
//│       ;; bind variable x%14
//│       i32.const 4
//│       i32.const 1
//│       i32.shl
//│       i32.const 1
//│       i32.add
//│       ;; imm 4
//│       local.set $x%15
//│       ;; set x%15
//│       br 0
//│     end
//│     ;; end of match_x%9_1
//│     ;; join point j%1(x%15)
//│     local.get $x%8
//│     local.get $x%15
//│     i32.add
//│     i32.const -1
//│     i32.add
//│     local.set $x%16
//│     ;; bind variable x%16
//│     local.get $x%16
//│   )
//│   (export "complex_foo" (func $complex_foo))
//│   (func $bar  (result i32)
//│     (local $x%17 i32)
//│     (local $x%18 i32)
//│     (local $x%19 i32)
//│     (local $x%20 i32)
//│     i32.const 28
//│     call $malloc
//│     local.set $x%17
//│     ;; allocate for x%17
//│     local.get $x%17
//│     i32.const 0
//│     i32.store
//│     local.get $x%17
//│     i32.const 6
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 6
//│     i32.const 7
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 7
//│     i32.const 8
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 8
//│     call $_ZA_constructor
//│     ;; CtorApp A
//│     local.get $x%17
//│     call $complex_foo
//│     local.set $x%18
//│     i32.const 24
//│     call $malloc
//│     local.set $x%19
//│     ;; allocate for x%19
//│     local.get $x%19
//│     i32.const 1
//│     i32.store
//│     local.get $x%19
//│     i32.const 9
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 9
//│     i32.const 10
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 10
//│     call $_ZB_constructor
//│     ;; CtorApp B
//│     local.get $x%19
//│     call $complex_foo
//│     local.set $x%20
//│     local.get $x%20
//│   )
//│   (export "bar" (func $bar))
//│   (func $main  (result i32)
//│     (local $x%21 i32)
//│     call $bar
//│     local.set $x%21
//│     local.get $x%21
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=8
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=8
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZB_show (param $this i32) 
//│ 
//│     i32.const 4
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 32
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 36
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=20
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZB_show" (func $_ZB_show))
//│   (func $_ZA_constructor (param $this i32) (param $x i32) (param $y i32) (param $z i32) 
//│ 
//│     local.get $this
//│     i32.const 28
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $x
//│     i32.store
//│     ;; set param x
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $y
//│     i32.store
//│     ;; set param y
//│     local.get $this
//│     i32.const 24
//│     i32.add
//│     local.get $z
//│     i32.store
//│     ;; set param z
//│   )
//│   (export "_ZA_constructor" (func $_ZA_constructor))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class B
//│       block $case_0
//│         ;; case class A
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZA_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZB_show
//│       return
//│     end
//│     i32.const 40
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZA_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 1
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 12
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 16
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=20
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 24
//│     i32.const 1
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=24
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZA_show" (func $_ZA_show))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=8
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=8
//│   )
//│   (export "free" (func $free))
//│   (func $_ZB_constructor (param $this i32) (param $m i32) (param $n i32) 
//│ 
//│     local.get $this
//│     i32.const 20
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $m
//│     i32.store
//│     ;; set param m
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $n
//│     i32.store
//│     ;; set param n
//│   )
//│   (export "_ZB_constructor" (func $_ZB_constructor))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 3
