:NewParser
:ParseOnly


:GraphOpt
class Cons(head, tail)
class Nil
fun foo(t) =
  if t is
    Cons(x, xs) then
      x + if xs is
        Cons(x1, xs1) then x1
        Nil then 0
    Nil then 0
fun bar(t) =
  foo(t)
bar(Cons(1, Cons(2, Nil)))
//│ |#class| |Cons|(|head|,| |tail|)|↵|#class| |Nil|↵|#fun| |foo|(|t|)| |#=|→|#if| |t| |is|→|Cons|(|x|,| |xs|)| |#then|→|x| |+| |#if| |xs| |is|→|Cons|(|x1|,| |xs1|)| |#then| |x1|↵|Nil| |#then| |0|←|←|↵|Nil| |#then| |0|←|←|↵|#fun| |bar|(|t|)| |#=|→|foo|(|t|)|←|↵|bar|(|Cons|(|1|,| |Cons|(|2|,| |Nil|)|)|)|
//│ Parsed: {class Cons(head, tail,) {}; class Nil {}; fun foo = (t,) => {if t is ‹(Cons(x, xs,)) then {+(x,)(if xs is ‹(Cons(x1, xs1,)) then x1; (Nil) then 0›,)}; (Nil) then 0›}; fun bar = (t,) => {foo(t,)}; bar(Cons(1, Cons(2, Nil,),),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(_: Var(head), _: Var(tail)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(t)), Blk(...))), NuFunDef(None, bar, None, [], Lam(Tup(_: Var(t)), Blk(...))), App(Var(bar), Tup(_: App(Var(Cons), Tup(_: IntLit(1), _: App(Var(Cons), Tup(_: IntLit(2), _: Var(Nil))))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Cons, [head,tail]) [] {
//│ }
//│ ClassInfo(1, Nil, []) [] {
//│ }
//│ }, {
//│ Def(0, foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%6) = x%6
//│   in case t%0 of
//│     Cons => let x%0 = t%0.tail
//│       in let x%1 = t%0.head
//│         in let join j%1(x%4) = let x%5 = +(x%1,x%4)
//│               in jump j%0(x%5)
//│           in case x%0 of
//│             Cons => let x%2 = x%0.tail
//│               in let x%3 = x%0.head
//│                 in jump j%1(x%3)
//│             Nil => jump j%1(0)
//│     Nil => jump j%0(0)
//│ )
//│ Def(1, bar, [t%1], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = foo(t%1)
//│   in x%7
//│ )
//│ },
//│ let x%8 = Nil()
//│   in let x%9 = Cons(2,x%8)
//│     in let x%10 = Cons(1,x%9)
//│       in let* (x%11) = bar(x%10)
//│         in x%11)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $Nil (i32.const 0) "\4e\69\6c")
//│   (data $head (i32.const 4) "\68\65\61\64")
//│   (data $Cons (i32.const 8) "\43\6f\6e\73")
//│   (data $_ZIT_Nil (i32.const 12) "\00\00\00\00")
//│   (data $tail (i32.const 16) "\74\61\69\6c")
//│   (data $free_list (i32.const 20) "\00\00\00\00")
//│   (data $_ZIT_Cons (i32.const 24) "\00\00\00\00")
//│   (data $undefined (i32.const 28) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $foo (param $t%0 i32) (result i32)
//│     (local $x%6 i32)
//│     (local $x%3 i32)
//│     (local $x%2 i32)
//│     (local $x%1 i32)
//│     (local $x%0 i32)
//│     (local $x%5 i32)
//│     (local $x%4 i32)
//│     block $match_t%0_1
//│       ;; nested blocks: 0
//│       block $match_t%0_0
//│         ;; nested blocks: 1
//│         block $case_t%0
//│           local.get $t%0
//│           i32.load
//│           i32.const 0
//│           i32.sub
//│           br_table 0 1
//│           ;; case br table
//│         end
//│         local.get $t%0
//│         i32.const 20
//│         i32.add
//│         i32.load
//│         local.set $x%0
//│         ;; bind variable x%0
//│         local.get $t%0
//│         i32.const 16
//│         i32.add
//│         i32.load
//│         local.set $x%1
//│         ;; bind variable x%1
//│         block $match_x%0_1
//│           ;; nested blocks: 0
//│           block $match_x%0_0
//│             ;; nested blocks: 1
//│             block $case_x%0
//│               local.get $x%0
//│               i32.load
//│               i32.const 0
//│               i32.sub
//│               br_table 0 1
//│               ;; case br table
//│             end
//│             local.get $x%0
//│             i32.const 20
//│             i32.add
//│             i32.load
//│             local.set $x%2
//│             ;; bind variable x%2
//│             local.get $x%0
//│             i32.const 16
//│             i32.add
//│             i32.load
//│             local.set $x%3
//│             ;; bind variable x%3
//│             local.get $x%3
//│             local.set $x%4
//│             ;; set x%4
//│             br 1
//│           end
//│           ;; end of match_x%0_0
//│           i32.const 0
//│           i32.const 1
//│           i32.shl
//│           i32.const 1
//│           i32.add
//│           ;; imm 0
//│           local.set $x%4
//│           ;; set x%4
//│           br 0
//│         end
//│         ;; end of match_x%0_1
//│         ;; join point j%1(x%4)
//│         local.get $x%1
//│         local.get $x%4
//│         i32.add
//│         i32.const -1
//│         i32.add
//│         local.set $x%5
//│         ;; bind variable x%5
//│         local.get $x%5
//│         local.set $x%6
//│         ;; set x%6
//│         br 1
//│       end
//│       ;; end of match_t%0_0
//│       i32.const 0
//│       i32.const 1
//│       i32.shl
//│       i32.const 1
//│       i32.add
//│       ;; imm 0
//│       local.set $x%6
//│       ;; set x%6
//│       br 0
//│     end
//│     ;; end of match_t%0_1
//│     ;; join point j%0(x%6)
//│     local.get $x%6
//│   )
//│   (export "foo" (func $foo))
//│   (func $bar (param $t%1 i32) (result i32)
//│     (local $x%7 i32)
//│     local.get $t%1
//│     call $foo
//│     local.set $x%7
//│     local.get $x%7
//│   )
//│   (export "bar" (func $bar))
//│   (func $main  (result i32)
//│     (local $x%8 i32)
//│     (local $x%9 i32)
//│     (local $x%10 i32)
//│     (local $x%11 i32)
//│     i32.const 16
//│     call $malloc
//│     local.set $x%8
//│     ;; allocate for x%8
//│     local.get $x%8
//│     i32.const 1
//│     i32.store
//│     local.get $x%8
//│     call $_ZNil_constructor
//│     ;; CtorApp Nil
//│     i32.const 24
//│     call $malloc
//│     local.set $x%9
//│     ;; allocate for x%9
//│     local.get $x%9
//│     i32.const 0
//│     i32.store
//│     local.get $x%9
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│     local.get $x%8
//│     call $incref
//│     local.get $x%8
//│     call $_ZCons_constructor
//│     ;; CtorApp Cons
//│     i32.const 24
//│     call $malloc
//│     local.set $x%10
//│     ;; allocate for x%10
//│     local.get $x%10
//│     i32.const 0
//│     i32.store
//│     local.get $x%10
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     local.get $x%9
//│     call $incref
//│     local.get $x%9
//│     call $_ZCons_constructor
//│     ;; CtorApp Cons
//│     local.get $x%10
//│     call $bar
//│     local.set $x%11
//│     local.get $x%11
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=20
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=20
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $_ZNil_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 3
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZNil_show" (func $_ZNil_show))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZCons_constructor (param $this i32) (param $head i32) (param $tail i32) 
//│ 
//│     local.get $this
//│     i32.const 24
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $head
//│     i32.store
//│     ;; set param head
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $tail
//│     i32.store
//│     ;; set param tail
//│   )
//│   (export "_ZCons_constructor" (func $_ZCons_constructor))
//│   (func $_ZCons_show (param $this i32) 
//│ 
//│     i32.const 8
//│     i32.const 4
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 4
//│     i32.const 4
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 16
//│     i32.const 4
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=20
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZCons_show" (func $_ZCons_show))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class Nil
//│       block $case_0
//│         ;; case class Cons
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZCons_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZNil_show
//│       return
//│     end
//│     i32.const 28
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZNil_constructor (param $this i32) 
//│ 
//│     local.get $this
//│     i32.const 12
//│     i32.store offset=8
//│     ;; set itable
//│   )
//│   (export "_ZNil_constructor" (func $_ZNil_constructor))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=20
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=20
//│   )
//│   (export "free" (func $free))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ 3

:GraphOpt
class Cons(head, tail)
class Nil
Cons(1, Cons(2, Nil))
//│ |#class| |Cons|(|head|,| |tail|)|↵|#class| |Nil|↵|Cons|(|1|,| |Cons|(|2|,| |Nil|)|)|
//│ Parsed: {class Cons(head, tail,) {}; class Nil {}; Cons(1, Cons(2, Nil,),)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, Cons, (), Tup(_: Var(head), _: Var(tail)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit()), App(Var(Cons), Tup(_: IntLit(1), _: App(Var(Cons), Tup(_: IntLit(2), _: Var(Nil))))))
//│ Lifted:
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, Cons, [head,tail]) [] {
//│ }
//│ ClassInfo(1, Nil, []) [] {
//│ }
//│ }, {
//│ 
//│ },
//│ let x%0 = Nil()
//│   in let x%1 = Cons(2,x%0)
//│     in let x%2 = Cons(1,x%1)
//│       in x%2)
//│ 
//│ WasmBackend:
//│ (module 
//│   (import "system" "mem" (memory 100))
//│   (func $log_str (import "system" "log_str") (param i32 i32))
//│   (func $log_char (import "system" "log_char") (param i32))
//│   (func $log_int (import "system" "log_int") (param i32))
//│ 
//│ 
//│   (table 0 funcref)
//│   (elem (i32.const 0)
//│ 
//│   )
//│   (global (mut i32) i32.const 64)
//│   (data $Nil (i32.const 0) "\4e\69\6c")
//│   (data $head (i32.const 4) "\68\65\61\64")
//│   (data $Cons (i32.const 8) "\43\6f\6e\73")
//│   (data $_ZIT_Nil (i32.const 12) "\00\00\00\00")
//│   (data $tail (i32.const 16) "\74\61\69\6c")
//│   (data $free_list (i32.const 20) "\00\00\00\00")
//│   (data $_ZIT_Cons (i32.const 24) "\00\00\00\00")
//│   (data $undefined (i32.const 28) "\75\6e\64\65\66\69\6e\65\64")
//│   (func $main  (result i32)
//│     (local $x%0 i32)
//│     (local $x%1 i32)
//│     (local $x%2 i32)
//│     i32.const 16
//│     call $malloc
//│     local.set $x%0
//│     ;; allocate for x%0
//│     local.get $x%0
//│     i32.const 1
//│     i32.store
//│     local.get $x%0
//│     call $_ZNil_constructor
//│     ;; CtorApp Nil
//│     i32.const 24
//│     call $malloc
//│     local.set $x%1
//│     ;; allocate for x%1
//│     local.get $x%1
//│     i32.const 0
//│     i32.store
//│     local.get $x%1
//│     i32.const 2
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 2
//│     local.get $x%0
//│     call $incref
//│     local.get $x%0
//│     call $_ZCons_constructor
//│     ;; CtorApp Cons
//│     i32.const 24
//│     call $malloc
//│     local.set $x%2
//│     ;; allocate for x%2
//│     local.get $x%2
//│     i32.const 0
//│     i32.store
//│     local.get $x%2
//│     i32.const 1
//│     i32.const 1
//│     i32.shl
//│     i32.const 1
//│     i32.add
//│     ;; imm 1
//│     local.get $x%1
//│     call $incref
//│     local.get $x%1
//│     call $_ZCons_constructor
//│     ;; CtorApp Cons
//│     local.get $x%2
//│   )
//│   (export "main" (func $main))
//│   (func $reuse_cell  (result i32)
//│     (local $block i32)
//│     (local $i i32)
//│     (local $pfield i32)
//│     block $check_null
//│       block $free_branch
//│         i32.const 0
//│         i32.load offset=20
//│         local.tee $block
//│         i32.eqz
//│         br_if 0
//│         i32.const 0
//│         local.get $block
//│         i32.load
//│         i32.store offset=20
//│         i32.const 16
//│         local.set $i
//│         loop $deref_iter
//│           local.get $i
//│           i32.const 63
//│           i32.gt_u
//│           br_if 2
//│           block $check_pointer
//│             local.get $block
//│             local.get $i
//│             i32.add
//│             local.tee $pfield
//│             i32.load8_u
//│             i32.const 1
//│             i32.and
//│             br_if 0
//│             local.get $pfield
//│             call $decref
//│           end
//│           local.get $i
//│           i32.const 4
//│           i32.add
//│           local.set $i
//│           br 0
//│         end
//│       end
//│       global.get 0
//│       local.tee $block
//│       i32.const 64
//│       i32.add
//│       global.set 0
//│     end
//│     local.get $block
//│   )
//│   (export "reuse_cell" (func $reuse_cell))
//│   (func $malloc (param $size i32) (result i32)
//│     (local $block i32)
//│     i32.const -128
//│     local.set $block
//│     block $fast_path_small_obj
//│       local.get $size
//│       i32.const 64
//│       i32.gt_s
//│       br_if 0
//│       call $reuse_cell
//│       local.tee $block
//│       call $incref
//│     end
//│     local.get $block
//│   )
//│   (export "malloc" (func $malloc))
//│   (func $decref (param $ref i32) (result )
//│     (local $v i32)
//│     block $check_refcnt
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const -1
//│       i32.add
//│       local.tee $v
//│       ;; dec refcnt in ref
//│       br_if 0
//│       local.get $ref
//│       call $free
//│       return
//│     end
//│     local.get $ref
//│     local.get $v
//│     i32.store offset=12
//│   )
//│   (export "decref" (func $decref))
//│   (func $_ZNil_show (param $this i32) 
//│ 
//│     i32.const 0
//│     i32.const 3
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZNil_show" (func $_ZNil_show))
//│   (func $__mlscript_invokeinterface (param $this i32) (param $id i32) (result i32)
//│     (local $idx i32)
//│     (local $end i32)
//│     (local $iptr i32)
//│     (local $scan i32)
//│     local.get $this
//│     i32.const 8
//│     i32.add
//│     i32.load
//│     local.set $iptr
//│     ;; repr impl traits
//│     local.get $iptr
//│     i32.load
//│     i32.const 8
//│     i32.mul
//│     i32.const 4
//│     i32.add
//│     local.get $iptr
//│     i32.add
//│     local.set $end
//│     ;; end address of traits list
//│     i32.const -1
//│     local.set $idx
//│     local.get $iptr
//│     i32.const 4
//│     i32.add
//│     local.set $scan
//│     block $itable_search
//│       loop $itable_loop
//│         local.get $scan
//│         local.get $end
//│         i32.ge_u
//│         br_if 1
//│         local.get $scan
//│         i32.load
//│         ;; load trait id in itable
//│         local.get $id
//│         i32.eq
//│         if
//│           local.get $scan
//│           i32.const 4
//│           i32.add
//│           i32.load
//│           local.set $idx
//│         end
//│         local.get $scan
//│         i32.const 8
//│         i32.add
//│         local.set $scan
//│         br 0
//│       end
//│     end
//│     local.get $idx
//│   )
//│   (export "__mlscript_invokeinterface" (func $__mlscript_invokeinterface))
//│   (func $_ZCons_constructor (param $this i32) (param $head i32) (param $tail i32) 
//│ 
//│     local.get $this
//│     i32.const 24
//│     i32.store offset=8
//│     ;; set itable
//│     local.get $this
//│     i32.const 16
//│     i32.add
//│     local.get $head
//│     i32.store
//│     ;; set param head
//│     local.get $this
//│     i32.const 20
//│     i32.add
//│     local.get $tail
//│     i32.store
//│     ;; set param tail
//│   )
//│   (export "_ZCons_constructor" (func $_ZCons_constructor))
//│   (func $_ZCons_show (param $this i32) 
//│ 
//│     i32.const 8
//│     i32.const 4
//│     call $log_str
//│     i32.const 40
//│     call $log_char
//│     i32.const 4
//│     i32.const 4
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=16
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 16
//│     i32.const 4
//│     call $log_str
//│     i32.const 58
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     local.get $this
//│     i32.load offset=20
//│     call $show
//│     i32.const 44
//│     call $log_char
//│     i32.const 32
//│     call $log_char
//│     i32.const 41
//│     call $log_char
//│   )
//│   (export "_ZCons_show" (func $_ZCons_show))
//│   (func $show (param $this i32) 
//│ 
//│     block $check_int_or_pointer
//│       local.get $this
//│       i32.const 1
//│       i32.and
//│       i32.eqz
//│       br_if 0
//│       local.get $this
//│       i32.const 1
//│       i32.shr_s
//│       call $log_int
//│       return
//│     end
//│     block $case_1
//│       ;; case class Nil
//│       block $case_0
//│         ;; case class Cons
//│         block $match_id
//│           local.get $this
//│           i32.load
//│           br_table 0 1 2
//│         end
//│         local.get $this
//│         call $_ZCons_show
//│         return
//│       end
//│       local.get $this
//│       call $_ZNil_show
//│       return
//│     end
//│     i32.const 28
//│     i32.const 9
//│     call $log_str
//│   )
//│   (export "show" (func $show))
//│   (func $_ZNil_constructor (param $this i32) 
//│ 
//│     local.get $this
//│     i32.const 12
//│     i32.store offset=8
//│     ;; set itable
//│   )
//│   (export "_ZNil_constructor" (func $_ZNil_constructor))
//│   (func $incref (param $ref i32) (result )
//│ 
//│     block $check_pointer
//│       local.get $ref
//│       i32.const 1
//│       i32.and
//│       br_if 0
//│       local.get $ref
//│       local.get $ref
//│       i32.load offset=12
//│       i32.const 1
//│       i32.add
//│       i32.store offset=12
//│     end
//│   )
//│   (export "incref" (func $incref))
//│   (func $free (param $ref i32) (result )
//│     (local $temp i32)
//│     local.get $temp
//│     i32.const 0
//│     i32.load offset=20
//│     i32.store
//│     i32.const 0
//│     local.get $temp
//│     i32.store offset=20
//│   )
//│   (export "free" (func $free))
//│ )
//│ 
//│ Wasm Interpreter Output:
//│ Cons(head: 1, tail: Cons(head: 2, tail: Nil(), ), )
